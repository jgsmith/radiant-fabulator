#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "xsm_expression_parser.racc".
#

require 'racc/parser'


module Fabulator

  module XSM

    class ExpressionParser < Racc::Parser

module_eval <<'..end xsm_expression_parser.racc modeval..idf5a2b0cea2', 'xsm_expression_parser.racc', 108
  require 'fabulator/xsm'

  def parse(t)
    @source = t
    @curpos = 0
      
    @yydebug = true

    @last_token = nil
      
    do_parse
  end

  @@regex = {
    :simple_tokens => %r{\.\.|::|!=|>=|<=|==|\|\||&&|\/\/|\.|@|\*|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,},
    :ncname => %r{(?:[a-zA-Z_][a-zA-Z0-9_.-]*)},
    :event_type => %r{(?:processing-instruction|comment|text|node)},
    :axis_name => %r{(?:attribute|child|child-or-self|descendant|descendant-or-self|method|self)},
    :namespace_name => %r{(?:context|global|local|session|universal)},
  }

  @@preceding_tokens = { }
  [%{
    @ :: ( 
    and or mod div 
    * 
    / // | + - = != < <= > >=
    == & && ||
  }.split(/\s*/), '[', ',', '$' ].each { |t| @@preceding_tokens[t] = true }

  @@regex[:general] = Regexp.compile(%{
    (?:
      ((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})\\s*(?=\\()
      |(#{@@regex[:ncname]})\\s*(?=::)
      |(#{@@regex[:ncname]}:\\*)                       
      |((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]}) 
      |('[^']*'|"[^"]*")                             
      |(-?\\d+(?:\\.\\d+)?|\\.\\d+)                 
      |\\$((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})
      |(#{@@regex[:simple_tokens]})
    )},'x')
  @@regex[:general] = Regexp.compile(%{(?:((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})\\s*(?=\\()|(#{@@regex[:ncname]})\\s*(?=::)|(#{@@regex[:ncname]}:\\*)|((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})|('[^']*'|"[^"]*")|(-?\\d+(?:\\.\\d+)?|\\.\\d+)|\\$((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})|(#{@@regex[:simple_tokens]}))})
  def next_token  
    @last_token = @token
    @token = nil
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      @curpos = @curpos + 1
    end
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    if @last_token && ! @@preceding_tokens[@last_token[1]]
      if @source[@curpos..@curpos] == '*'
        @token = [ '*', '*' ]
      else
        res = @@regex[:ncname].match(@source[@curpos..@source.length-1])
        if !res.nil? && res[1] != ''
          ncname = (res[1] rescue '*doh*')
          case ncname
            when 'and':
              @token = [ :AND, 'and' ]
            when 'or':
              @token = [ :OR, 'or' ]
            when 'mod':
              @token = [ :MOD, 'mod' ]
            when 'div':
              @token = [ :DIV, 'div' ]
            else
              if !ncname.nil? && ncname.length > 0
                raise "Expected and, or, mod, or div, but got '#{ncname}'"
              end
          end
        end
      end
    end
 
    if @token.nil? && @source[@curpos..@curpos+1] == '..'
      @token = [ :RANGE, '..' ]
    end

    if @token.nil?
      puts "source: [#{@source[@curpos..@source.length-1]}]"
     #puts "regex: #{@@regex[:general]}"
      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      #@source[@curpos..@source.length-1] =~ @@regex[:general]
      if !res[1].nil?
        @token = [ :FUNCTION_NAME, res[1] ]
      elsif !res[2].nil?
        @token = [ res[2] == 'method' ? :AXIS_METHOD : :AXIS_NAME, res[2] ]
      elsif !res[3].nil?
        @token = [ :NAME_COLON_STAR, res[3] ]
      elsif !res[4].nil?
        @token = [ :QNAME, res[4] ]
      elsif !res[5].nil?
        s = res[5]
        s = s[1..s.length-2]
        @token = [ :LITERAL, s ]
      elsif !res[6].nil?
        @token = [ :NUMBER, res[6] ]
      elsif !res[7].nil?
        @token = [ :DOLLAR_QNAME, res[7] ]
      elsif !res[8].nil?
        @token = [ res[8], res[8] ]
      else
        raise "Failed to parse '#{@source}' at #{@curpos}"
      end
    end

    if !@token[1].nil?
      @curpos = @curpos + @token[1].length
    end
    puts "Token: [ #{@token[0]}, #{@token[1]} ]"
    return @token
  end
..end xsm_expression_parser.racc modeval..idf5a2b0cea2

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 37, :_reduce_none,
 1, 37, :_reduce_none,
 1, 38, :_reduce_none,
 3, 38, :_reduce_4,
 1, 40, :_reduce_none,
 3, 40, :_reduce_6,
 1, 41, :_reduce_none,
 3, 41, :_reduce_8,
 3, 41, :_reduce_9,
 1, 42, :_reduce_none,
 3, 42, :_reduce_11,
 3, 42, :_reduce_12,
 3, 42, :_reduce_13,
 3, 42, :_reduce_14,
 3, 39, :_reduce_15,
 1, 43, :_reduce_none,
 3, 43, :_reduce_17,
 3, 43, :_reduce_18,
 1, 44, :_reduce_none,
 3, 44, :_reduce_20,
 3, 44, :_reduce_21,
 3, 44, :_reduce_22,
 1, 45, :_reduce_none,
 2, 45, :_reduce_24,
 1, 46, :_reduce_none,
 1, 46, :_reduce_26,
 3, 48, :_reduce_27,
 3, 48, :_reduce_28,
 1, 47, :_reduce_29,
 3, 47, :_reduce_30,
 0, 52, :_reduce_none,
 2, 52, :_reduce_32,
 2, 52, :_reduce_33,
 1, 49, :_reduce_none,
 1, 49, :_reduce_none,
 1, 54, :_reduce_36,
 2, 54, :_reduce_37,
 2, 54, :_reduce_38,
 4, 54, :_reduce_39,
 4, 54, :_reduce_40,
 1, 53, :_reduce_41,
 3, 53, :_reduce_42,
 3, 53, :_reduce_43,
 3, 55, :_reduce_44,
 5, 55, :_reduce_45,
 4, 55, :_reduce_46,
 7, 55, :_reduce_47,
 1, 55, :_reduce_48,
 1, 55, :_reduce_49,
 0, 56, :_reduce_none,
 2, 56, :_reduce_51,
 1, 56, :_reduce_52,
 0, 51, :_reduce_53,
 4, 51, :_reduce_54,
 1, 50, :_reduce_none,
 3, 50, :_reduce_none,
 3, 50, :_reduce_none,
 1, 50, :_reduce_none,
 1, 50, :_reduce_none,
 4, 50, :_reduce_none,
 0, 58, :_reduce_none,
 1, 58, :_reduce_none,
 1, 59, :_reduce_none,
 3, 59, :_reduce_none,
 1, 57, :_reduce_none,
 1, 57, :_reduce_none,
 1, 57, :_reduce_none ]

racc_reduce_n = 68

racc_shift_n = 119

racc_action_table = [
    17,    85,    86,    46,    30,    47,     6,    56,    57,    37,
    44,    19,    23,    25,    87,    43,     2,    48,     8,    10,
    12,    73,    18,    22,    17,    54,    29,     1,    30,    36,
     6,    38,   107,    37,   106,    19,    23,    25,    58,    59,
     2,    40,     8,    10,    12,   105,    18,    22,    17,   103,
    29,     1,    30,    36,     6,    38,    33,    34,    35,    19,
    23,    25,    58,    59,     2,    87,     8,    10,    12,    54,
    18,    22,    17,    55,    29,     1,    30,    87,     6,    60,
    61,    62,    63,    19,    23,    25,    58,    59,     2,    42,
     8,    10,    12,    71,    18,    22,    17,    78,    29,     1,
    30,    80,     6,    60,    61,    62,    63,    19,    23,    25,
    58,    59,     2,   116,     8,    10,    12,   -61,    18,    22,
    17,    83,    29,     1,    30,    84,     6,    60,    61,    62,
    63,    19,    23,    25,    64,    65,     2,    87,     8,    10,
    12,   117,    18,    22,    17,    87,    29,     1,    30,   nil,
     6,    33,    34,    35,   nil,    19,    23,    25,    58,    59,
     2,   nil,     8,    10,    12,   nil,    18,    22,    17,   nil,
    29,     1,    30,   nil,     6,    66,    64,    65,   nil,    19,
    23,    25,    90,    91,     2,   nil,     8,    10,    12,   nil,
    18,    22,    17,   nil,    29,     1,    30,   nil,     6,    33,
    34,    35,   nil,    19,    23,    25,    64,    65,     2,   nil,
     8,    10,    12,   nil,    18,    22,    17,   nil,    29,     1,
    30,   nil,     6,    64,    65,    64,    65,    19,    23,    25,
    64,    65,     2,    17,     8,    10,    12,    30,    18,    22,
    58,    59,    29,     1,    19,    23,    25,    64,    65,     2,
   nil,     8,    10,    12,   nil,    18,    22,    17,   nil,    29,
     1,    30,   nil,     6,    58,    59,    56,    57,    19,    23,
    25,   nil,   nil,     2,    17,     8,    10,    12,    30,    18,
    22,   nil,   nil,    29,     1,    19,    23,    25,   nil,   nil,
     2,   nil,     8,    10,    12,   nil,    18,    22,    17,   nil,
    29,     1,    30,   nil,     6,   nil,   nil,   nil,   nil,    19,
    23,    25,   nil,   nil,     2,   nil,     8,    10,    12,   -61,
    18,    22,    17,   nil,    29,     1,    30,   nil,     6,   nil,
   nil,   nil,   nil,    19,    23,    25,   nil,   nil,     2,   nil,
     8,    10,    12,   nil,    18,    22,    17,   nil,    29,     1,
    30,   nil,     6,   nil,   nil,   nil,   nil,    19,    23,    25,
   nil,   nil,     2,   nil,     8,    10,    12,   nil,    18,    22,
    17,   nil,    29,     1,    30,   nil,     6,   nil,   nil,   nil,
   nil,    19,    23,    25,   nil,   nil,     2,   nil,     8,    10,
    12,   nil,    18,    22,    17,   nil,    29,     1,    30,   nil,
     6,   nil,   nil,   nil,   nil,    19,    23,    25,   nil,   nil,
     2,   nil,     8,    10,    12,   nil,    18,    22,    17,   nil,
    29,     1,    30,   nil,     6,   nil,   nil,   nil,   nil,    19,
    23,    25,   nil,   nil,     2,   nil,     8,    10,    12,   nil,
    18,    22,    17,   nil,    29,     1,    30,   nil,     6,   nil,
   nil,   nil,   nil,    19,    23,    25,   nil,   nil,     2,   nil,
     8,    10,    12,   nil,    18,    22,    17,   nil,    29,     1,
    30,   nil,     6,   nil,   nil,   nil,   nil,    19,    23,    25,
   nil,   nil,     2,   nil,     8,    10,    12,   nil,    18,    22,
    17,   nil,    29,     1,    30,   nil,     6,   nil,   nil,   nil,
   nil,    19,    23,    25,   nil,   nil,     2,   nil,     8,    10,
    12,   nil,    18,    22,    17,   nil,    29,     1,    30,   nil,
     6,   nil,   nil,   nil,   nil,    19,    23,    25,   nil,   nil,
     2,   nil,     8,    10,    12,   nil,    18,    22,    17,   nil,
    29,     1,    30,   nil,     6,   nil,   nil,   nil,   nil,    19,
    23,    25,   nil,    30,     2,   nil,     8,    10,    12,    30,
    18,    22,    50,   nil,    29,     1,   nil,     8,    50,   nil,
   -50,    18,    22,     8,    30,   nil,    30,    18,    22,   nil,
   nil,   nil,   -50,    50,   -50,    50,   nil,    30,     8,    30,
     8,   nil,    18,    22,    18,    22,    50,   nil,    50,   nil,
    30,     8,    30,     8,   nil,    18,    22,    18,    22,    50,
   nil,    50,   nil,   nil,     8,   nil,     8,   nil,    18,    22,
    18,    22 ]

racc_action_check = [
     0,    52,    52,    13,     0,    14,     0,    26,    26,    42,
    11,     0,     0,     0,    52,    10,     0,    16,     0,     0,
     0,    42,     0,     0,   107,    81,     0,     0,   107,    42,
   107,    42,    76,     5,    74,   107,   107,   107,   109,   109,
   107,     5,   107,   107,   107,    73,   107,   107,    56,    71,
   107,   107,    56,     5,    56,     5,   101,   101,   101,    56,
    56,    56,   111,   111,    56,    70,    56,    56,    56,    24,
    56,    56,     6,    25,    56,    56,     6,   104,     6,    93,
    93,    93,    93,     6,     6,     6,    27,    27,     6,     8,
     6,     6,     6,    40,     6,     6,   105,    45,     6,     6,
   105,    47,   105,    92,    92,    92,    92,   105,   105,   105,
   108,   108,   105,   110,   105,   105,   105,   105,   105,   105,
    54,    49,   105,   105,    54,    50,    54,    28,    28,    28,
    28,    54,    54,    54,   102,   102,    54,   113,    54,    54,
    54,   114,    54,    54,    57,   118,    54,    54,    57,   nil,
    57,   100,   100,   100,   nil,    57,    57,    57,   112,   112,
    57,   nil,    57,    57,    57,   nil,    57,    57,    12,   nil,
    57,    57,    12,   nil,    12,    32,    32,    32,   nil,    12,
    12,    12,    55,    55,    12,   nil,    12,    12,    12,   nil,
    12,    12,    87,   nil,    12,    12,    87,   nil,    87,     4,
     4,     4,   nil,    87,    87,    87,    99,    99,    87,   nil,
    87,    87,    87,   nil,    87,    87,    48,   nil,    87,    87,
    48,   nil,    48,    98,    98,    97,    97,    48,    48,    48,
    96,    96,    48,    46,    48,    48,    48,    46,    48,    48,
    51,    51,    48,    48,    46,    46,    46,    82,    82,    46,
   nil,    46,    46,    46,   nil,    46,    46,    17,   nil,    46,
    46,    17,   nil,    17,    53,    53,    89,    89,    17,    17,
    17,   nil,   nil,    17,    44,    17,    17,    17,    44,    17,
    17,   nil,   nil,    17,    17,    44,    44,    44,   nil,   nil,
    44,   nil,    44,    44,    44,   nil,    44,    44,    43,   nil,
    44,    44,    43,   nil,    43,   nil,   nil,   nil,   nil,    43,
    43,    43,   nil,   nil,    43,   nil,    43,    43,    43,    43,
    43,    43,    66,   nil,    43,    43,    66,   nil,    66,   nil,
   nil,   nil,   nil,    66,    66,    66,   nil,   nil,    66,   nil,
    66,    66,    66,   nil,    66,    66,    65,   nil,    66,    66,
    65,   nil,    65,   nil,   nil,   nil,   nil,    65,    65,    65,
   nil,   nil,    65,   nil,    65,    65,    65,   nil,    65,    65,
    60,   nil,    65,    65,    60,   nil,    60,   nil,   nil,   nil,
   nil,    60,    60,    60,   nil,   nil,    60,   nil,    60,    60,
    60,   nil,    60,    60,    63,   nil,    60,    60,    63,   nil,
    63,   nil,   nil,   nil,   nil,    63,    63,    63,   nil,   nil,
    63,   nil,    63,    63,    63,   nil,    63,    63,    62,   nil,
    63,    63,    62,   nil,    62,   nil,   nil,   nil,   nil,    62,
    62,    62,   nil,   nil,    62,   nil,    62,    62,    62,   nil,
    62,    62,    61,   nil,    62,    62,    61,   nil,    61,   nil,
   nil,   nil,   nil,    61,    61,    61,   nil,   nil,    61,   nil,
    61,    61,    61,   nil,    61,    61,    33,   nil,    61,    61,
    33,   nil,    33,   nil,   nil,   nil,   nil,    33,    33,    33,
   nil,   nil,    33,   nil,    33,    33,    33,   nil,    33,    33,
    34,   nil,    33,    33,    34,   nil,    34,   nil,   nil,   nil,
   nil,    34,    34,    34,   nil,   nil,    34,   nil,    34,    34,
    34,   nil,    34,    34,    35,   nil,    34,    34,    35,   nil,
    35,   nil,   nil,   nil,   nil,    35,    35,    35,   nil,   nil,
    35,   nil,    35,    35,    35,   nil,    35,    35,    64,   nil,
    35,    35,    64,   nil,    64,   nil,   nil,   nil,   nil,    64,
    64,    64,   nil,    59,    64,   nil,    64,    64,    64,    19,
    64,    64,    59,   nil,    64,    64,   nil,    59,    19,   nil,
    19,    59,    59,    19,    23,   nil,    58,    19,    19,   nil,
   nil,   nil,    19,    23,    19,    58,   nil,    86,    23,    90,
    58,   nil,    23,    23,    58,    58,    86,   nil,    90,   nil,
    85,    86,    91,    90,   nil,    86,    86,    90,    90,    85,
   nil,    91,   nil,   nil,    85,   nil,    91,   nil,    85,    85,
    91,    91 ]

racc_action_pointer = [
    -6,   nil,   nil,   nil,   186,    20,    66,   nil,    69,   nil,
   -11,    -6,   162,   -13,     5,   nil,    15,   251,   nil,   549,
   nil,   nil,   nil,   564,    66,    53,     3,    69,   121,   nil,
   nil,   nil,   165,   460,   484,   508,   nil,   nil,   nil,   nil,
    71,   nil,    -4,   292,   268,    70,   227,   101,   210,   114,
   105,   223,   -16,   247,   114,   165,    42,   138,   566,   543,
   364,   436,   412,   388,   532,   340,   316,   nil,   nil,   nil,
    35,    26,   nil,    19,     7,   nil,    -2,   nil,   nil,   nil,
   nil,    22,   236,   nil,   nil,   590,   577,   186,   nil,   262,
   579,   592,    97,    73,   nil,   nil,   219,   214,   212,   195,
   138,    43,   123,   nil,    47,    90,   nil,    18,    93,    21,
    82,    45,   141,   107,   114,   nil,   nil,   nil,   115 ]

racc_action_default = [
   -50,   -59,   -55,   -41,   -16,   -68,   -50,   -19,   -68,   -23,
   -68,   -25,   -50,   -26,   -68,   -29,    -1,   -50,   -48,   -36,
   -53,    -2,   -52,   -50,    -3,   -68,    -5,   -34,    -7,   -58,
   -49,   -35,   -10,   -50,   -50,   -50,   -66,   -67,   -65,   -53,
   -68,   -24,   -68,   -50,   -50,   -68,   -50,   -68,   -50,   -68,
   -68,   -37,   -31,   -38,   -50,   -51,   -50,   -50,   -50,   -50,
   -50,   -50,   -50,   -50,   -50,   -50,   -50,   -20,   -21,   -22,
   -44,   -68,   -53,   -68,   -68,   -63,   -62,   -27,   -57,   -28,
   119,    -4,   -10,   -56,   -51,   -50,   -50,   -50,   -30,    -6,
   -50,   -50,    -8,    -9,   -42,   -43,   -11,   -12,   -13,   -14,
   -17,   -18,   -15,   -53,   -46,   -50,   -60,   -50,   -32,   -33,
   -68,   -39,   -40,   -45,   -68,   -64,   -54,   -53,   -47 ]

racc_goto_table = [
    14,    52,    51,    74,    39,    41,    53,    77,    89,    79,
    82,    81,    45,    94,    95,    88,    82,    49,    82,    82,
    70,   nil,    96,    97,    98,    99,    92,    93,   102,   100,
   101,   nil,    67,    68,    69,   nil,   nil,   nil,   nil,   nil,
   nil,    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   104,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   114,   nil,   nil,   108,   109,
   nil,   nil,   nil,   111,   112,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   113,   nil,   nil,   110,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   118,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   115 ]

racc_goto_check = [
     1,    15,    17,    22,    21,     9,    17,    11,     5,    11,
     7,     4,     1,    19,    19,    16,     7,     1,     7,     7,
    15,   nil,     7,     7,     7,     7,     6,     6,     7,     8,
     8,   nil,     9,     9,     9,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,    17,    17,
   nil,   nil,   nil,    17,    17,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    15,   nil,   nil,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,   -37,   -46,   -30,   -38,   -35,    -1,
   nil,   -37,   nil,   nil,   nil,   -19,   -37,   -17,   nil,   -45,
   nil,    -1,   -40,   nil ]

racc_goto_default = [
   nil,    75,    16,    21,    24,    26,    28,    32,     4,     7,
     9,    11,    13,    15,    20,   nil,   nil,    27,    31,     3,
     5,   nil,   nil,    76 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :OR => 2,
 :AND => 3,
 "=" => 4,
 "!=" => 5,
 "<" => 6,
 ">" => 7,
 "<=" => 8,
 ">=" => 9,
 ".." => 10,
 "+" => 11,
 "-" => 12,
 "*" => 13,
 :DIV => 14,
 :MOD => 15,
 "|" => 16,
 "/" => 17,
 "//" => 18,
 :AXIS_NAME => 19,
 "::" => 20,
 "{" => 21,
 :DOLLAR_QNAME => 22,
 "}" => 23,
 :AXIS_METHOD => 24,
 :FUNCTION_NAME => 25,
 "(" => 26,
 ")" => 27,
 "." => 28,
 "@" => 29,
 "[" => 30,
 "]" => 31,
 :LITERAL => 32,
 :NUMBER => 33,
 "," => 34,
 :QNAME => 35 }

racc_use_result_var = true

racc_nt_base = 36

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'OR',
'AND',
'"="',
'"!="',
'"<"',
'">"',
'"<="',
'">="',
'".."',
'"+"',
'"-"',
'"*"',
'DIV',
'MOD',
'"|"',
'"/"',
'"//"',
'AXIS_NAME',
'"::"',
'"{"',
'DOLLAR_QNAME',
'"}"',
'AXIS_METHOD',
'FUNCTION_NAME',
'"("',
'")"',
'"."',
'"@"',
'"["',
'"]"',
'LITERAL',
'NUMBER',
'","',
'QNAME',
'$start',
'expr',
'or_expr',
'range_expr',
'and_expr',
'equality_expr',
'relational_expr',
'additive_expr',
'multiplicative_expr',
'unary_expr',
'union_expr',
'path_expr',
'union_expr_x',
'location_path',
'primary_expr',
'predicates',
'segment',
'relative_location_path',
'absolute_location_path',
'step',
'axis',
'node_test',
'opt_args',
'args']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 14
  def _reduce_4( val, _values, result )
 result = Fabulator::XSM::OrExpr.new(val[0], val[2])
   result
  end
.,.,

 # reduce 5 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 17
  def _reduce_6( val, _values, result )
 result = Fabulator::XSM::AndExpr.new(val[0], val[2])
   result
  end
.,.,

 # reduce 7 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 20
  def _reduce_8( val, _values, result )
 result = Fabulator::XSM::EqExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 21
  def _reduce_9( val, _values, result )
 result = Fabulator::XSM::NeqExpr.new(val[0], val[2])
   result
  end
.,.,

 # reduce 10 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 24
  def _reduce_11( val, _values, result )
 result = Fabulator::XSM::LtExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 25
  def _reduce_12( val, _values, result )
 result = Fabulator::XSM::LtExpr.new(val[2], val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 26
  def _reduce_13( val, _values, result )
 result = Fabulator::XSM::LteExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 27
  def _reduce_14( val, _values, result )
 result = Fabulator::XSM::LteExpr.new(val[2], val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 29
  def _reduce_15( val, _values, result )
 result = Fabulator::XSM::RangeExpr.new(val[0], val[2])
   result
  end
.,.,

 # reduce 16 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 32
  def _reduce_17( val, _values, result )
 result = Fabulator::XSM::AddExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 33
  def _reduce_18( val, _values, result )
 result = Fabulator::XSM::SubExpr.new(val[0], val[2])
   result
  end
.,.,

 # reduce 19 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 36
  def _reduce_20( val, _values, result )
 result = Fabulator::XSM::MpyExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 37
  def _reduce_21( val, _values, result )
 result = Fabulator::XSM::DivExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 38
  def _reduce_22( val, _values, result )
 result = Fabulator::XSM::ModExpr.new(val[0], val[2])
   result
  end
.,.,

 # reduce 23 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 41
  def _reduce_24( val, _values, result )
 result = Fabulator::XSM::NegExpr.new(val[1])
   result
  end
.,.,

 # reduce 25 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 44
  def _reduce_26( val, _values, result )
 result = Fabulator::XSM::UnionExpr.new(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 46
  def _reduce_27( val, _values, result )
 result = [ val[0], val[2] ]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 47
  def _reduce_28( val, _values, result )
 result = val[0] + [ val[2] ]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 49
  def _reduce_29( val, _values, result )
 result = Fabulator::XSM::PathExpr.new(nil, [], val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 50
  def _reduce_30( val, _values, result )
 result = Fabulator::XSM::PathExpr.new(val[0], val[1], val[2])
   result
  end
.,.,

 # reduce 31 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 53
  def _reduce_32( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 54
  def _reduce_33( val, _values, result )
 result = [ Fabulator::XSM::AxisDescendentOrSelf.new ] + val[1]
   result
  end
.,.,

 # reduce 34 omitted

 # reduce 35 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 62
  def _reduce_36( val, _values, result )
 result = [ Fabulator::XSM::RootContext.new ]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 63
  def _reduce_37( val, _values, result )
 result = [ Fabulator::XSM::RootContext.new ] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 64
  def _reduce_38( val, _values, result )
 result = [ Fabulator::XSM::RootContext.new, Fabulator::XSM::AxisDescendentOrSelf.new(val[1][0]) ] + val[1][1..val[1].size-1]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 65
  def _reduce_39( val, _values, result )
 result = [ Fabulator::XSM::RootContext.new(val[0]) ] + val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 66
  def _reduce_40( val, _values, result )
 result = [ Fabulator::XSM::RootContext.new(val[0]), Fabulator::XSM::AxisDescendentOrSelf.new(val[3][0]) ] + val[3][1..val[3].size-1]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 68
  def _reduce_41( val, _values, result )
 result = [ val[0] ]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 69
  def _reduce_42( val, _values, result )
 result = val[0] + [ val[2] ]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 70
  def _reduce_43( val, _values, result )
 result = val[0] + [ Fabulator::XSM::AxisDescendentOrSelf.new(val[2]) ]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 72
  def _reduce_44( val, _values, result )
 result = Fabulator::XSM::Step.new(val[0], val[1], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 73
  def _reduce_45( val, _values, result )
 result = Fabulator::XSM::Step.new(val[0], val[2], val[4])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 74
  def _reduce_46( val, _values, result )
 result = Fabulator::XSM::FunctionStep.new(val[2], nil, val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 75
  def _reduce_47( val, _values, result )
 result = Fabulator::XSM::FunctionStep.new(val[2], val[4], val[6])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 76
  def _reduce_48( val, _values, result )
 result = Fabulator::XSM::CurrentContext.new
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 77
  def _reduce_49( val, _values, result )
 result = Fabulator::XSM::AncestorContext.new
   result
  end
.,.,

 # reduce 50 omitted

module_eval <<'.,.,', 'xsm_expression_parser.racc', 80
  def _reduce_51( val, _values, result )
 result = Fabulator::XSM::Axis.new(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 81
  def _reduce_52( val, _values, result )
 result = Fabulator::XSM::AxisAttribute.new
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 83
  def _reduce_53( val, _values, result )
 result = [ ]
   result
  end
.,.,

module_eval <<'.,.,', 'xsm_expression_parser.racc', 84
  def _reduce_54( val, _values, result )
 result = val[0] + [ val[2] ]
   result
  end
.,.,

 # reduce 55 omitted

 # reduce 56 omitted

 # reduce 57 omitted

 # reduce 58 omitted

 # reduce 59 omitted

 # reduce 60 omitted

 # reduce 61 omitted

 # reduce 62 omitted

 # reduce 63 omitted

 # reduce 64 omitted

 # reduce 65 omitted

 # reduce 66 omitted

 # reduce 67 omitted

 def _reduce_none( val, _values, result )
  result
 end

    end   # class ExpressionParser

  end   # module XSM

end   # module Fabulator
