#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fabulator
  module XSM
    class ExpressionParser < Racc::Parser

module_eval(<<'...end xsm_expression_parser.racc/module_eval...', 'xsm_expression_parser.racc', 141)
  require 'fabulator/xsm'

  def parse(t, xml = { })
    @source = t
    @curpos = 0
    @namespaces = { }

    if xml.is_a?(Hash)
      @namespaces = xml
    else
      xml.namespaces.each do |ns|
        @namespaces[ns.prefix] = ns.href
      end
      begin
        @namespaces[''] = xml.namespaces.default.href
      rescue
      end
    end

    @yydebug = true

    @last_token = nil
      
    do_parse
  end

  @@regex = {
    :simple_tokens => %r{\.\.|::|!=|>=|<=|==|\|\||&&|\/\/|:=|\.|@|\*|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,|;},
    :ncname => %r{(?:[a-zA-Z_][a-zA-Z0-9_.-]*)},
    :event_type => %r{(?:processing-instruction|comment|text|node)},
    :axis_name => %r{(?:attribute|child|child-or-self|descendant|descendant-or-self|method|self)},
    :namespace_name => %r{(?:context|global|local|session|universal)},
    :number => %r{(-?\d+(?:\.\d+)?|\.\d+)},
  }

  @@regex[:axis] = %r{(#{@@regex[:ncname]})\s*(?=::)}
  @@regex[:name_colon_star] = %r{(#{@@regex[:ncname]}:\*)}
  @@regex[:qname] = %r{((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})}
  @@regex[:dollar_qname] = %r{\$#{@@regex[:qname]}}
  @@regex[:function_name] = %r{#{@@regex[:qname]}\s*(?=\([^:])}

  @@preceding_tokens = { }
  [%{
    @ :: ( 
    and or mod div 
    * 
    / // | + - = != < <= > >=
    == & && ||
  }.split(/\s*/), '[', ',', '$' ].each { |t| @@preceding_tokens[t] = true }

  @@regex[:general] = Regexp.compile(%{^(?:#{@@regex[:function_name]}|#{@@regex[:axis]}|#{@@regex[:name_colon_star]}|#{@@regex[:qname]}|('[^']*'|"[^"]*")|#{@@regex[:number]}|#{@@regex[:dollar_qname]}|(#{@@regex[:simple_tokens]}))})

  def next_token  
    @token = nil
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end

    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #
    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
        end
        @curpos = @curpos + 1
      end
      white_space = white_space + 1
    end

    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
        
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    if new_line > 0
      @token = [ :NL, new_line ]
    elsif white_space > 0
      @token = [ :SP, white_space ]
    end

    if @token.nil? && @last_token && ! @@preceding_tokens[@last_token[1]]
      if @source[@curpos..@curpos] == '*'
        @token = [ '*', '*' ]
      else
        if @source[@curpos..@source.length-1] =~ /^(#{@@regex[:ncname]})/
          ncname = $1
          case ncname
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            when 'to':
              @token = [ :TO, 'to' ]
            when 'and':
              @token = [ :AND, 'and' ]
            when 'or':
              @token = [ :OR, 'or' ]
            when 'mod':
              @token = [ :MOD, 'mod' ]
            when 'div':
              @token = [ :DIV, 'div' ]
            #when '*doh*':
            #  # do nothing
            #  @token = nil
            else
              @token = [ :QNAME, ncname ]
          end
        end
      end
    end
 
    if @token.nil? && @source[@curpos..@curpos+1] == '..'
      @token = [ :RANGE, '..' ]
    end

    if @token.nil?
      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      #@source[@curpos..@source.length-1] =~ @@regex[:general]
      #res = [ nil, $1, $2, $3, $4, $5, $6, $7, $8 ]
      if !res[1].nil?
        @token = [ :FUNCTION_NAME, res[1] ]
      elsif !res[2].nil?
        @token = [ res[2] == 'method' ? :AXIS_METHOD : :AXIS_NAME, res[2] ]
      elsif !res[3].nil?
        @token = [ :NAME_COLON_STAR, res[3] ]
      elsif !res[4].nil?
        @token = [ :QNAME, res[4] ]
      elsif !res[5].nil?
        s = res[5]
        s = s[1..s.length-2]
        @token = [ :LITERAL, s ]
      elsif !res[6].nil?
        @token = [ :NUMBER, res[6] ]
      elsif !res[7].nil?
        @token = [ :DOLLAR_QNAME, res[7] ]
      elsif !res[8].nil?
        @token = [ res[8], res[8] ]
      else
        raise "Failed to parse '#{@source}' at #{@curpos}"
      end
    end

    if !@token[1].nil?
      @curpos = @curpos + @token[1].length
    end
    @last_token = @token
    Rails.logger.info("Token: [#{@token[0].to_s},#{@token[1].to_s}]")
    return @token
  end
...end xsm_expression_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
   -81,   -81,   108,    19,    96,    31,    34,   -81,    44,    45,
     3,    82,    44,    45,    23,   -82,    30,   -81,   -81,    82,
    19,   110,    31,    34,   -81,   195,    25,     3,   113,    38,
    64,    23,    92,    30,    10,    15,    21,    91,    28,    33,
    36,    40,   -10,    25,     5,     9,    38,    61,    62,    44,
    45,    10,    15,    21,   116,    28,    33,    36,    40,    44,
    45,     5,     9,    17,    19,   200,    31,    34,    44,    45,
    93,     3,    94,    95,   201,    23,   187,    30,   119,   120,
    17,    19,   -10,    31,    34,   183,   117,    25,     3,   -10,
    38,   117,    23,   180,    30,    10,    15,    21,   -10,    28,
    33,    36,    40,    82,    25,     5,     9,    38,    19,    44,
    45,    34,    10,    15,    21,   100,    28,    33,    36,    40,
    44,    45,     5,     9,   178,    19,    65,    31,    34,   -10,
    67,    25,     3,   210,    38,    71,    23,   212,    30,    10,
    15,    21,   -10,    28,    33,    36,    40,   213,    25,     5,
     9,    38,    44,    45,    44,    45,    10,    15,    21,   165,
    28,    33,    36,    40,    44,    45,     5,     9,    19,    99,
    31,    34,   -10,   -10,    76,     3,    44,    45,   217,    23,
   117,    30,   -10,   -10,   164,    19,   163,    31,    34,    44,
    45,    25,     3,    82,    38,   221,    23,   146,    30,    10,
    15,    21,   117,    28,    33,    36,    40,   nil,    25,     5,
     9,    38,    44,    45,    44,    45,    10,    15,    21,   nil,
    28,    33,    36,    40,    49,    50,     5,     9,    19,   nil,
    31,    34,   -10,   -10,   nil,     3,    49,    50,   nil,    23,
   nil,    30,   -10,   -10,   nil,    19,   nil,    31,    34,    44,
    45,    25,     3,   nil,    38,   nil,    23,   nil,    30,    10,
    15,    21,   nil,    28,    33,    36,    40,   nil,    25,     5,
     9,    38,    19,    44,    45,    34,    10,    15,    21,   nil,
    28,    33,    36,    40,    44,    45,     5,     9,   nil,    19,
   nil,    31,    34,   -10,   -10,    25,     3,    44,    45,   nil,
    23,   nil,    30,    10,    15,    21,   nil,    28,    33,    36,
    40,   nil,    25,     5,     9,    38,    19,    44,    45,    34,
    10,    15,    21,    64,    28,    33,    36,    40,    44,    45,
     5,     9,   107,    19,    44,    45,    34,    44,    45,    25,
    61,    62,    44,    45,   nil,   -10,   -10,    10,    15,    21,
   nil,    28,    33,    36,    40,   nil,    25,     5,     9,    38,
    19,    44,    45,    34,    10,    15,    21,   nil,    28,    33,
    36,    40,    44,    45,     5,     9,   nil,    19,    44,    45,
    34,    44,    45,    25,    44,    45,    38,    44,    45,   -10,
   -10,    10,    15,    21,   nil,    28,    33,    36,    40,   nil,
    25,     5,     9,    38,    19,    44,    45,    34,    10,    15,
    21,   nil,    28,    33,    36,    40,    44,    45,     5,     9,
   nil,    19,   nil,    31,    34,    44,    45,    25,     3,   nil,
    38,   nil,    23,   nil,    30,    10,    15,    21,   nil,    28,
    33,    36,    40,   nil,    25,     5,     9,    38,    19,    44,
    45,    34,    10,    15,    21,   nil,    28,    33,    36,    40,
    97,    98,     5,     9,   nil,    19,    80,    81,    34,    44,
    45,    25,    44,    45,    38,    44,    45,   -10,   -10,    10,
    15,    21,   nil,    28,    33,    36,    40,   nil,    25,     5,
     9,    38,    19,    44,    45,    34,    10,    15,    21,   nil,
    28,    33,    36,    40,    78,    79,     5,     9,   nil,    19,
    44,    45,    34,    44,    45,    25,    44,    45,    38,   -10,
   nil,   -10,   -10,    10,    15,    21,   nil,    28,    33,    36,
    40,   nil,    25,     5,     9,    38,    19,    44,    45,    34,
    10,    15,    21,   nil,    28,    33,    36,    40,    44,    45,
     5,     9,   nil,    19,    44,    45,    34,    44,    45,    25,
    44,    45,    38,    44,    45,   -10,   -10,    10,    15,    21,
   nil,    28,    33,    36,    40,   nil,    25,     5,     9,    38,
    19,    44,    45,    34,    10,    15,    21,   nil,    28,    33,
    36,    40,    44,    45,     5,     9,   nil,    19,    44,    45,
    34,    44,    45,    25,    49,    50,    38,    44,    45,   -10,
   -10,    10,    15,    21,   nil,    28,    33,    36,    40,   nil,
    25,     5,     9,    38,    19,    49,    50,    34,    10,    15,
    21,   nil,    28,    33,    36,    40,    49,    50,     5,     9,
   nil,    19,    44,    45,    34,   103,   104,    25,    44,    45,
    38,    87,    88,    89,    90,    10,    15,    21,   nil,    28,
    33,    36,    40,   nil,    25,     5,     9,    38,    19,    44,
    45,    34,    10,    15,    21,   nil,    28,    33,    36,    40,
    94,    95,     5,     9,   nil,    19,   nil,    31,    34,    44,
    45,    25,     3,   nil,    38,   nil,    23,   nil,    30,    10,
    15,    21,   nil,    28,    33,    36,    40,   nil,    25,     5,
     9,    38,    44,    45,    44,    45,    10,    15,    21,   nil,
    28,    33,    36,    40,    44,    45,     5,     9,    19,   nil,
    31,    34,    44,    45,   nil,     3,    44,    45,   nil,    23,
   nil,    30,    49,    50,   nil,    19,   nil,    31,    34,    49,
    50,    25,     3,   nil,    38,   nil,    23,   nil,    30,    10,
    15,    21,   nil,    28,    33,    36,    40,   nil,    25,     5,
     9,    38,    19,    44,    45,    34,    10,    15,    21,   nil,
    28,    33,    36,    40,    44,    45,     5,     9,   nil,    19,
   nil,    31,    34,    44,    45,    25,     3,   nil,    38,   nil,
    23,   nil,    30,    10,    15,    21,   nil,    28,    33,    36,
    40,   nil,    25,     5,     9,    38,    44,    45,    44,    45,
    10,    15,    21,   nil,    28,    33,    36,    40,    44,    45,
     5,     9,    19,   nil,    31,    34,   nil,    44,    45,     3,
    44,    45,   nil,    23,   nil,    30,    44,    45,    44,    45,
   -10,   -10,   -10,   -10,   nil,    25,    44,    45,    38,   -10,
   -10,   -10,   -10,    10,    15,    21,   nil,    28,    33,    36,
    40,   nil,    25,     5,     9,    44,    45,   nil,   -10,   -10,
   -10,   -10,    53,   nil,    28,    25,    36,    40,    44,    45,
   nil,    25,   nil,   -71,   -71,    53,   nil,    28,    25,    36,
    40,    53,   nil,    28,    25,    36,    40,   nil,    53,   nil,
    28,    25,    36,    40,    53,   nil,    28,    25,    36,    40,
   nil,    53,   nil,    28,    25,    36,    40,    53,   nil,    28,
   nil,    36,    40,   nil,    53,   nil,    28,   nil,    36,    40,
    44,    45,    44,    45,    44,    45 ]

racc_action_check = [
   181,   181,    68,   181,    56,   181,   181,   181,   152,   152,
   181,    66,    16,    16,   181,   152,   181,   111,   111,    69,
   111,    70,   111,   111,   111,   179,   181,   111,    73,   181,
    20,   111,    54,   111,   181,   181,   181,    53,   181,   181,
   181,   181,    16,   111,   181,   181,   111,    20,    20,    35,
    35,   111,   111,   111,    76,   111,   111,   111,   111,   172,
   172,   111,   111,    75,    75,   185,    75,    75,   173,   173,
    55,    75,    55,    55,   186,    75,   153,    75,    77,    77,
     0,     0,    35,     0,     0,   148,    77,    75,     0,   172,
    75,   145,     0,   144,     0,    75,    75,    75,   173,    75,
    75,    75,    75,   193,     0,    75,    75,     0,   135,    29,
    29,   135,     0,     0,     0,    60,     0,     0,     0,     0,
   219,   219,     0,     0,   140,   194,    21,   194,   194,   219,
    28,   135,   194,   199,   135,    33,   194,   202,   194,   135,
   135,   135,    29,   135,   135,   135,   135,   208,   194,   135,
   135,   194,   158,   158,   169,   169,   194,   194,   194,   127,
   194,   194,   194,   194,    98,    98,   194,   194,   192,    59,
   192,   192,   158,   158,    39,   192,    39,    39,   214,   192,
   216,   192,   169,   169,   126,   191,   125,   191,   191,   100,
   100,   192,   191,    48,   192,   220,   191,   107,   191,   192,
   192,   192,   102,   192,   192,   192,   192,   nil,   191,   192,
   192,   191,   160,   160,   159,   159,   191,   191,   191,   nil,
   191,   191,   191,   191,    52,    52,   191,   191,   198,   nil,
   198,   198,   160,   160,   nil,   198,    57,    57,   nil,   198,
   nil,   198,   159,   159,   nil,   155,   nil,   155,   155,    99,
    99,   198,   155,   nil,   198,   nil,   155,   nil,   155,   198,
   198,   198,   nil,   198,   198,   198,   198,   nil,   155,   198,
   198,   155,   154,     2,     2,   154,   155,   155,   155,   nil,
   155,   155,   155,   155,    97,    97,   155,   155,   nil,   149,
   nil,   149,   149,     2,     2,   154,   149,   105,   105,   nil,
   149,   nil,   149,   154,   154,   154,   nil,   154,   154,   154,
   154,   nil,   149,   154,   154,   149,   147,   166,   166,   147,
   149,   149,   149,    67,   149,   149,   149,   149,   221,   221,
   149,   149,    67,   139,   108,   108,   139,   109,   109,   147,
    67,    67,   110,   110,   nil,   166,   166,   147,   147,   147,
   nil,   147,   147,   147,   147,   nil,   139,   147,   147,   139,
   138,   171,   171,   138,   139,   139,   139,   nil,   139,   139,
   139,   139,    96,    96,   139,   139,   nil,   137,   112,   112,
   137,   113,   113,   138,   117,   117,   138,    95,    95,   171,
   171,   138,   138,   138,   nil,   138,   138,   138,   138,   nil,
   137,   138,   138,   137,   136,    94,    94,   136,   137,   137,
   137,   nil,   137,   137,   137,   137,    93,    93,   137,   137,
   nil,   196,   nil,   196,   196,    92,    92,   136,   196,   nil,
   136,   nil,   196,   nil,   196,   136,   136,   136,   nil,   136,
   136,   136,   136,   nil,   196,   136,   136,   196,   134,   170,
   170,   134,   196,   196,   196,   nil,   196,   196,   196,   196,
    58,    58,   196,   196,   nil,   133,    47,    47,   133,     1,
     1,   134,   217,   217,   134,   210,   210,   170,   170,   134,
   134,   134,   nil,   134,   134,   134,   134,   nil,   133,   134,
   134,   133,   132,    12,    12,   132,   133,   133,   133,   nil,
   133,   133,   133,   133,    43,    43,   133,   133,   nil,   131,
    90,    90,   131,   174,   174,   132,    89,    89,   132,    12,
   nil,    12,    12,   132,   132,   132,   nil,   132,   132,   132,
   132,   nil,   131,   132,   132,   131,   130,   168,   168,   130,
   131,   131,   131,   nil,   131,   131,   131,   131,    34,    34,
   131,   131,   nil,   129,   201,   201,   129,    31,    31,   130,
    30,    30,   130,    88,    88,   168,   168,   130,   130,   130,
   nil,   130,   130,   130,   130,   nil,   129,   130,   130,   129,
   128,   167,   167,   128,   129,   129,   129,   nil,   129,   129,
   129,   129,     3,     3,   129,   129,   nil,   124,    23,    23,
   124,   197,   197,   128,     6,     6,   128,   141,   141,   167,
   167,   128,   128,   128,   nil,   128,   128,   128,   128,   nil,
   124,   128,   128,   124,   123,   142,   142,   123,   124,   124,
   124,   nil,   124,   124,   124,   124,   143,   143,   124,   124,
   nil,   122,    62,    62,   122,    65,    65,   123,   146,   146,
   123,    51,    51,    51,    51,   123,   123,   123,   nil,   123,
   123,   123,   123,   nil,   122,   123,   123,   122,   121,    87,
    87,   121,   122,   122,   122,   nil,   122,   122,   122,   122,
   190,   190,   122,   122,   nil,   211,   nil,   211,   211,    17,
    17,   121,   211,   nil,   121,   nil,   211,   nil,   211,   121,
   121,   121,   nil,   121,   121,   121,   121,   nil,   211,   121,
   121,   211,   151,   151,    83,    83,   211,   211,   211,   nil,
   211,   211,   211,   211,   189,   189,   211,   211,   101,   nil,
   101,   101,    82,    82,   nil,   101,    81,    81,   nil,   101,
   nil,   101,   156,   156,   nil,   218,   nil,   218,   218,   157,
   157,   101,   218,   nil,   101,   nil,   218,   nil,   218,   101,
   101,   101,   nil,   101,   101,   101,   101,   nil,   218,   101,
   101,   218,    74,    80,    80,    74,   218,   218,   218,   nil,
   218,   218,   218,   218,    79,    79,   218,   218,   nil,    72,
   nil,    72,    72,    78,    78,    74,    72,   nil,    74,   nil,
    72,   nil,    72,    74,    74,    74,   nil,    74,    74,    74,
    74,   nil,    72,    74,    74,    72,   184,   184,   183,   183,
    72,    72,    72,   nil,    72,    72,    72,    72,   161,   161,
    72,    72,   222,   nil,   222,   222,   nil,     7,     7,   222,
   163,   163,   nil,   222,   nil,   222,   164,   164,   165,   165,
   161,   161,   161,   161,   nil,   222,   162,   162,   222,     7,
     7,     7,     7,   222,   222,   222,   nil,   222,   222,   222,
   222,   nil,    10,   222,   222,    13,    13,   nil,   162,   162,
   162,   162,    10,   nil,    10,    15,    10,    10,   180,   180,
   nil,   120,   nil,    10,    10,    15,   nil,    15,    49,    15,
    15,   120,   nil,   120,   119,   120,   120,   nil,    49,   nil,
    49,   104,    49,    49,   119,   nil,   119,    50,   119,   119,
   nil,   104,   nil,   104,   103,   104,   104,    50,   nil,    50,
   nil,    50,    50,   nil,   103,   nil,   103,   nil,   103,   103,
    71,    71,   178,   178,    38,    38 ]

racc_action_pointer = [
    76,   467,   271,   590,   nil,   nil,   568,   835,   nil,   nil,
   844,   nil,   491,   873,   nil,   857,    10,   687,   nil,   nil,
    -2,    87,   nil,   596,   nil,   nil,   nil,   nil,    91,   107,
   558,   555,   nil,   127,   546,    47,   nil,   nil,   942,   174,
   nil,   nil,   nil,   484,   nil,   nil,   nil,   444,   188,   870,
   889,   627,   188,    -2,     3,    42,   -15,   200,   427,   137,
   110,   nil,   640,   nil,   nil,   609,     6,   291,   -33,    14,
    13,   938,   784,    -7,   767,    59,    54,    42,   791,   782,
   771,   734,   730,   712,   nil,   nil,   nil,   667,   561,   514,
   508,   nil,   423,   414,   403,   385,   370,   282,   162,   247,
   187,   723,   158,   896,   883,   295,   nil,   189,   332,   335,
   340,    15,   376,   379,   nil,   nil,   nil,   382,   nil,   876,
   863,   663,   636,   619,   592,   171,   171,   145,   575,   548,
   531,   504,   487,   460,   443,   103,   399,   372,   355,   328,
   118,   605,   589,   600,    76,    47,   646,   311,    68,   284,
   nil,   710,     6,    67,   267,   240,   706,   713,   150,   212,
   210,   826,   854,   838,   844,   846,   315,   579,   535,   152,
   447,   359,    57,    66,   511,   nil,   nil,   nil,   940,   -26,
   886,    -2,   nil,   816,   814,    56,    26,   nil,   nil,   722,
   650,   180,   163,    98,   120,   nil,   416,   599,   223,   124,
   nil,   552,    92,   nil,   nil,   nil,   nil,   nil,   138,   nil,
   473,   680,   nil,   nil,   168,   nil,   136,   470,   740,   118,
   184,   326,   827,   nil ]

racc_action_default = [
   -71,   -23,   -25,   -88,    -3,   -78,   -56,   -28,    -4,   -79,
   -58,   -57,   -31,    -5,   -63,   -71,   -38,   -88,    -6,   -76,
   -88,   -88,   -41,   -88,    -7,   -70,   -45,    -8,   -88,   -47,
   -88,   -10,    -9,   -88,   -10,   -48,   -69,   -51,   -10,   -88,
   -73,   -74,    -1,   -88,   -12,   -13,   -11,   -88,   -88,   -71,
   -71,   -88,   -59,   -88,   -11,   -88,   -88,   -60,   -11,   -88,
   -88,   -85,   -10,   -74,   -87,   -72,   -88,   -88,   -88,   -88,
   -88,   -10,   -71,   -88,   -71,   -71,   -88,   -53,   -88,   -88,
   -10,   -10,   -88,   -10,   -18,   -64,   -65,   -10,   -10,   -10,
   -10,   -72,   -88,   -10,   -10,   -10,   -88,   -88,   -88,   -10,
   -10,   -71,   -66,   -71,   -71,   -10,   -74,   -88,   -10,   -10,
   -10,   -71,   -10,   -10,   -46,    -2,   224,   -10,   -52,   -71,
   -71,   -71,   -71,   -71,   -71,   -88,   -11,   -88,   -71,   -71,
   -71,   -71,   -71,   -71,   -71,   -71,   -71,   -71,   -71,   -71,
   -88,   -10,   -61,   -62,   -11,   -67,   -10,   -71,   -11,   -71,
   -83,   -10,   -10,   -88,   -71,   -71,   -54,   -55,   -26,   -31,
   -27,   -29,   -30,   -88,   -88,   -10,   -32,   -33,   -34,   -35,
   -37,   -36,   -39,   -40,   -24,   -43,   -44,   -42,   -10,   -88,
   -88,   -71,   -49,   -88,   -10,   -88,   -88,   -77,   -50,   -10,
   -88,   -71,   -71,   -88,   -71,   -86,   -71,   -10,   -71,   -88,
   -80,   -10,   -88,   -20,   -17,   -19,   -14,   -21,   -88,   -22,
   -10,   -71,   -75,   -74,   -88,   -84,   -68,   -10,   -71,   -16,
   -88,   -10,   -71,   -15 ]

racc_goto_table = [
    47,    77,   151,    83,   118,    51,    63,    42,   182,   174,
    55,   114,   172,   173,    59,   188,   161,   162,   158,   160,
   205,   105,    39,   102,   109,    85,    86,    68,   nil,    70,
   nil,   nil,    72,    73,   nil,   nil,    74,   nil,   nil,    43,
   nil,    48,   nil,   nil,    52,   nil,   nil,   nil,   nil,    57,
    54,    56,   nil,   106,    58,    60,   nil,   nil,   nil,   nil,
   101,    66,   nil,   nil,   nil,   nil,   145,   nil,    69,   111,
   nil,   nil,   197,   nil,   175,   176,   177,    75,   123,   124,
   nil,   127,   115,   nil,   nil,   128,   129,   130,   131,   nil,
   nil,   133,   134,   135,   nil,   nil,   nil,   139,   140,   nil,
   nil,   nil,   nil,   127,   nil,   nil,   147,   127,   149,   nil,
   153,   154,   nil,   112,   nil,   155,   121,   122,   nil,   nil,
   125,   126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   132,   nil,   nil,   nil,   136,   137,   138,   142,   143,   179,
   nil,   nil,   141,   144,   181,   nil,   nil,   148,   nil,   185,
   186,   nil,   150,   156,   157,   nil,    47,   nil,    47,    51,
    51,   nil,   nil,   193,   nil,   nil,   nil,   nil,   nil,   nil,
    59,    59,   nil,   216,   nil,   nil,   194,   nil,   nil,   nil,
   nil,   nil,   199,   nil,   nil,   nil,   nil,   202,   nil,   nil,
   184,   nil,   nil,   nil,   nil,   208,   189,   nil,   nil,   211,
   nil,   191,   192,   nil,   nil,   nil,   nil,   nil,   214,   nil,
    58,    58,    43,   nil,   nil,   218,   nil,   220,   196,   222,
   nil,   198,   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   203,   204,   nil,   206,   nil,   207,   nil,   209,
   nil,   nil,   nil,   nil,   nil,   nil,   159,   159,   159,   159,
   nil,   nil,   215,   166,   167,   168,   169,   170,   171,   219,
   nil,   159,   nil,   223 ]

racc_goto_check = [
    11,    25,    32,    12,    26,    11,    31,     2,    21,    14,
    11,    19,    18,    18,    11,    21,    16,    16,    15,    15,
    13,    12,     1,    25,    12,    29,    29,    11,   nil,    11,
   nil,   nil,    11,    11,   nil,   nil,    11,   nil,   nil,     3,
   nil,     3,   nil,   nil,    27,   nil,   nil,   nil,   nil,    27,
     3,     3,   nil,    31,     3,     3,   nil,   nil,   nil,   nil,
    11,     3,   nil,   nil,   nil,   nil,    25,   nil,     3,    11,
   nil,   nil,    32,   nil,    19,    19,    19,     3,    11,    11,
   nil,    11,     2,   nil,   nil,    11,    11,    11,    11,   nil,
   nil,    11,    11,    11,   nil,   nil,   nil,    11,    11,   nil,
   nil,   nil,   nil,    11,   nil,   nil,    11,    11,    11,   nil,
    11,    11,   nil,     4,   nil,    11,     3,     3,   nil,   nil,
     3,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,   nil,     3,     3,     3,    27,    27,    11,
   nil,   nil,     4,     3,    11,   nil,   nil,     3,   nil,    11,
    11,   nil,     4,    27,    27,   nil,    11,   nil,    11,    11,
    11,   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,
    11,    11,   nil,    25,   nil,   nil,    11,   nil,   nil,   nil,
   nil,   nil,    11,   nil,   nil,   nil,   nil,    11,   nil,   nil,
     4,   nil,   nil,   nil,   nil,    11,     4,   nil,   nil,    11,
   nil,     3,     3,   nil,   nil,   nil,   nil,   nil,    11,   nil,
     3,     3,     3,   nil,   nil,    11,   nil,    11,     3,    11,
   nil,     3,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,     4,   nil,     4,   nil,     4,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,    17,    17,    17,    17,
   nil,   nil,     4,    17,    17,    17,    17,    17,    17,     4,
   nil,    17,   nil,     4 ]

racc_goto_pointer = [
   nil,    22,     7,    38,    41,   nil,   nil,   nil,   nil,   nil,
   nil,    -2,   -45,  -173,  -127,  -103,  -107,   125,  -122,   -63,
   nil,  -139,   nil,   nil,   nil,   -40,   -73,    34,   nil,   -24,
   nil,   -14,  -109,   nil ]

racc_goto_default = [
   nil,   nil,   nil,    46,     4,     8,    13,    18,    24,    27,
    32,   190,   nil,    84,     1,     2,     7,    12,    16,    22,
    26,    29,    35,    37,    41,   nil,   nil,     6,    11,    14,
    20,   nil,   nil,   152 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 53, :_reduce_1,
  3, 53, :_reduce_2,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  0, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  7, 57, :_reduce_14,
  15, 60, :_reduce_15,
  11, 60, :_reduce_16,
  7, 61, :_reduce_17,
  1, 64, :_reduce_18,
  5, 64, :_reduce_19,
  5, 65, :_reduce_20,
  7, 62, :_reduce_21,
  7, 62, :_reduce_22,
  1, 58, :_reduce_none,
  5, 58, :_reduce_24,
  1, 66, :_reduce_none,
  5, 66, :_reduce_26,
  5, 66, :_reduce_27,
  1, 67, :_reduce_none,
  5, 67, :_reduce_29,
  5, 67, :_reduce_30,
  1, 68, :_reduce_none,
  5, 68, :_reduce_32,
  5, 68, :_reduce_33,
  5, 68, :_reduce_34,
  5, 68, :_reduce_35,
  5, 59, :_reduce_36,
  5, 59, :_reduce_37,
  1, 69, :_reduce_none,
  5, 69, :_reduce_39,
  5, 69, :_reduce_40,
  1, 70, :_reduce_none,
  5, 70, :_reduce_42,
  5, 70, :_reduce_43,
  5, 70, :_reduce_44,
  1, 71, :_reduce_none,
  3, 71, :_reduce_46,
  1, 72, :_reduce_none,
  1, 72, :_reduce_48,
  5, 74, :_reduce_49,
  5, 74, :_reduce_50,
  1, 73, :_reduce_51,
  3, 73, :_reduce_52,
  0, 78, :_reduce_none,
  2, 78, :_reduce_54,
  2, 78, :_reduce_55,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 80, :_reduce_58,
  2, 80, :_reduce_59,
  2, 80, :_reduce_60,
  4, 80, :_reduce_61,
  4, 80, :_reduce_62,
  1, 79, :_reduce_63,
  3, 79, :_reduce_64,
  3, 79, :_reduce_65,
  3, 81, :_reduce_66,
  4, 81, :_reduce_67,
  9, 81, :_reduce_68,
  1, 81, :_reduce_69,
  1, 81, :_reduce_70,
  0, 82, :_reduce_none,
  2, 82, :_reduce_72,
  1, 82, :_reduce_73,
  0, 77, :_reduce_74,
  6, 77, :_reduce_75,
  1, 76, :_reduce_76,
  5, 76, :_reduce_77,
  1, 76, :_reduce_78,
  1, 76, :_reduce_79,
  6, 76, :_reduce_80,
  0, 84, :_reduce_81,
  1, 84, :_reduce_none,
  1, 85, :_reduce_83,
  5, 85, :_reduce_84,
  1, 83, :_reduce_none,
  5, 83, :_reduce_86,
  1, 83, :_reduce_none ]

racc_reduce_n = 88

racc_shift_n = 224

racc_token_table = {
  false => 0,
  :error => 1,
  :SP => 2,
  :NL => 3,
  :LET => 4,
  :DOLLAR_QNAME => 5,
  ":=" => 6,
  :IF => 7,
  "(" => 8,
  ")" => 9,
  :THEN => 10,
  :ELSE => 11,
  :FOR => 12,
  :RETURN => 13,
  :COMMA => 14,
  :IN => 15,
  :SOME => 16,
  :SATISFIES => 17,
  :EVERY => 18,
  :OR => 19,
  :AND => 20,
  :EXCEPT => 21,
  "=" => 22,
  "!=" => 23,
  "<" => 24,
  ">" => 25,
  "<=" => 26,
  ">=" => 27,
  ".." => 28,
  :TO => 29,
  "+" => 30,
  "-" => 31,
  "*" => 32,
  :DIV => 33,
  :MOD => 34,
  "|" => 35,
  "/" => 36,
  "//" => 37,
  :AXIS_NAME => 38,
  "::" => 39,
  :AXIS_METHOD => 40,
  :FUNCTION_NAME => 41,
  "." => 42,
  "@" => 43,
  "[" => 44,
  "]" => 45,
  :LITERAL => 46,
  :NUMBER => 47,
  "," => 48,
  :QNAME => 49,
  "{" => 50,
  "}" => 51 }

racc_nt_base = 52

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SP",
  "NL",
  "LET",
  "DOLLAR_QNAME",
  "\":=\"",
  "IF",
  "\"(\"",
  "\")\"",
  "THEN",
  "ELSE",
  "FOR",
  "RETURN",
  "COMMA",
  "IN",
  "SOME",
  "SATISFIES",
  "EVERY",
  "OR",
  "AND",
  "EXCEPT",
  "\"=\"",
  "\"!=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"..\"",
  "TO",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "DIV",
  "MOD",
  "\"|\"",
  "\"/\"",
  "\"//\"",
  "AXIS_NAME",
  "\"::\"",
  "AXIS_METHOD",
  "FUNCTION_NAME",
  "\".\"",
  "\"@\"",
  "\"[\"",
  "\"]\"",
  "LITERAL",
  "NUMBER",
  "\",\"",
  "QNAME",
  "\"{\"",
  "\"}\"",
  "$start",
  "statements",
  "statement",
  "req_sp",
  "expr",
  "let_expr",
  "or_expr",
  "range_expr",
  "if_expr",
  "for_expr",
  "quant_expr",
  "sp",
  "for_vars",
  "for_var",
  "and_expr",
  "equality_expr",
  "relational_expr",
  "additive_expr",
  "multiplicative_expr",
  "unary_expr",
  "union_expr",
  "path_expr",
  "union_expr_x",
  "location_path",
  "primary_expr",
  "predicates",
  "segment",
  "relative_location_path",
  "absolute_location_path",
  "step",
  "axis",
  "node_test",
  "opt_args",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 10)
  def _reduce_1(val, _values, result)
     result = Fabulator::XSM::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 11)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 28)
  def _reduce_14(val, _values, result)
     result = Fabulator::XSM::LetExpr(val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 31)
  def _reduce_15(val, _values, result)
     result = Fabulator::XSM::IfExpr.new(val[4], val[10], val[14]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 32)
  def _reduce_16(val, _values, result)
     result = Fabulator::XSM::IfExpr.new(val[4], val[10], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 34)
  def _reduce_17(val, _values, result)
     result = Fabulator::XSM::ForExpr.new(val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 36)
  def _reduce_18(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 37)
  def _reduce_19(val, _values, result)
     result = val[0] + [ val[4] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 39)
  def _reduce_20(val, _values, result)
     result = Fabulator::XSM::ForVar.new(val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 41)
  def _reduce_21(val, _values, result)
     result = Fabulator::XSM::SomeExpr(val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 42)
  def _reduce_22(val, _values, result)
     result = Fabulator::XSM::EveryExpr(val[2], val[6]) 
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 45)
  def _reduce_24(val, _values, result)
     result = Fabulator::XSM::OrExpr.new(val[0], val[4]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 48)
  def _reduce_26(val, _values, result)
     result = Fabulator::XSM::AndExpr.new(val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 49)
  def _reduce_27(val, _values, result)
     result = Fabulator::XSM::ExceptExpr.new(val[0], val[4]) 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 52)
  def _reduce_29(val, _values, result)
     result = Fabulator::XSM::EqExpr.new(val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 53)
  def _reduce_30(val, _values, result)
     result = Fabulator::XSM::NeqExpr.new(val[0], val[4]) 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 56)
  def _reduce_32(val, _values, result)
     result = Fabulator::XSM::LtExpr.new(val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 57)
  def _reduce_33(val, _values, result)
     result = Fabulator::XSM::LtExpr.new(val[4], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 58)
  def _reduce_34(val, _values, result)
     result = Fabulator::XSM::LteExpr.new(val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 59)
  def _reduce_35(val, _values, result)
     result = Fabulator::XSM::LteExpr.new(val[4], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 61)
  def _reduce_36(val, _values, result)
     result = Fabulator::XSM::RangeExpr.new(val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 62)
  def _reduce_37(val, _values, result)
     result = Fabulator::XSM::RangeExpr.new(val[0], val[4]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 65)
  def _reduce_39(val, _values, result)
     result = Fabulator::XSM::AddExpr.new(val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 66)
  def _reduce_40(val, _values, result)
     result = Fabulator::XSM::SubExpr.new(val[0], val[4]) 
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 69)
  def _reduce_42(val, _values, result)
     result = Fabulator::XSM::MpyExpr.new(val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 70)
  def _reduce_43(val, _values, result)
     result = Fabulator::XSM::DivExpr.new(val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 71)
  def _reduce_44(val, _values, result)
     result = Fabulator::XSM::ModExpr.new(val[0], val[4]) 
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 74)
  def _reduce_46(val, _values, result)
     result = Fabulator::XSM::NegExpr.new(val[2]) 
    result
  end
.,.,

# reduce 47 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 77)
  def _reduce_48(val, _values, result)
     result = Fabulator::XSM::UnionExpr.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 79)
  def _reduce_49(val, _values, result)
     result = [ val[0], val[4] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 80)
  def _reduce_50(val, _values, result)
     result = val[0] + [ val[4] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 82)
  def _reduce_51(val, _values, result)
     result = Fabulator::XSM::PathExpr.new(nil, [], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 83)
  def _reduce_52(val, _values, result)
     result = Fabulator::XSM::PathExpr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 86)
  def _reduce_54(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 87)
  def _reduce_55(val, _values, result)
     result = [ Fabulator::XSM::AxisDescendentOrSelf.new ] + val[1] 
    result
  end
.,.,

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 95)
  def _reduce_58(val, _values, result)
     result = Fabulator::XSM::RootContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 96)
  def _reduce_59(val, _values, result)
     result = Fabulator::XSM::PathExpr.new(Fabulator::XSM::RootContext.new, [], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 97)
  def _reduce_60(val, _values, result)
     result = [ Fabulator::XSM::RootContext.new, Fabulator::XSM::AxisDescendentOrSelf.new(val[1][0]) ] + val[1][1..val[1].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 98)
  def _reduce_61(val, _values, result)
     result = [ Fabulator::XSM::RootContext.new(val[0]) ] + val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 99)
  def _reduce_62(val, _values, result)
     result = [ Fabulator::XSM::RootContext.new(val[0]), Fabulator::XSM::AxisDescendentOrSelf.new(val[3][0]) ] + val[3][1..val[3].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 101)
  def _reduce_63(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 102)
  def _reduce_64(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 103)
  def _reduce_65(val, _values, result)
     result = val[0] + [ Fabulator::XSM::AxisDescendentOrSelf.new(val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 105)
  def _reduce_66(val, _values, result)
     result = Fabulator::XSM::Predicates.new(Fabulator::XSM::Step.new(val[0], val[1]), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 107)
  def _reduce_67(val, _values, result)
     result = Fabulator::XSM::Predicates.new(Fabulator::XSM::Function.new(@namespaces, val[2], []), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 108)
  def _reduce_68(val, _values, result)
     result = Fabulator::XSM::Predicates.new(Fabulator::XSM::Function.new(@namespaces, val[2], val[5]), val[8]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 109)
  def _reduce_69(val, _values, result)
     result = Fabulator::XSM::CurrentContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 110)
  def _reduce_70(val, _values, result)
     result = Fabulator::XSM::AncestorContext.new 
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 113)
  def _reduce_72(val, _values, result)
     result = Fabulator::XSM::Axis.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 114)
  def _reduce_73(val, _values, result)
     result = Fabulator::XSM::Axis.new('attribute')  
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 116)
  def _reduce_74(val, _values, result)
     result = [ ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 117)
  def _reduce_75(val, _values, result)
     result = val[0] + [ val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 121)
  def _reduce_76(val, _values, result)
     result = Fabulator::XSM::Var.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 122)
  def _reduce_77(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 123)
  def _reduce_78(val, _values, result)
     result = Fabulator::XSM::Literal.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 124)
  def _reduce_79(val, _values, result)
     result = Fabulator::XSM::Literal.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 125)
  def _reduce_80(val, _values, result)
     result = Fabulator::XSM::Function.new(@namespaces, val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 127)
  def _reduce_81(val, _values, result)
     result = [ ] 
    result
  end
.,.,

# reduce 82 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 130)
  def _reduce_83(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 131)
  def _reduce_84(val, _values, result)
     result = val[0] + [ val[4] ] 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 134)
  def _reduce_86(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 87 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class ExpressionParser
    end   # module XSM
  end   # module Fabulator
