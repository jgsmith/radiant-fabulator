#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fabulator
  module XSM
    class ExpressionParser < Racc::Parser

module_eval(<<'...end xsm_expression_parser.racc/module_eval...', 'xsm_expression_parser.racc', 138)
  require 'fabulator/xsm'

  def parse(t, xml = { })
    @source = t
    @curpos = 0
    @namespaces = { }

    if xml.nil?
      @namespaces = { }
    elsif xml.is_a?(Hash)
      @namespaces = xml
    else
      xml.namespaces.each do |ns|
        @namespaces[ns.prefix] = ns.href
      end
      begin
        @namespaces[''] = xml.namespaces.default.href
      rescue
      end
    end

    @yydebug = true

    @last_token = nil
      
    do_parse
  end

  @@regex = {
    :simple_tokens => %r{\.\.|::|!=|>=|<=|\/\/|:=|\.|@|[*]|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,|;},
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)},
    :event_type => %r{(?:processing-instruction|comment|text|node)},
    :axis_name => %r{(?:attribute|child|child-or-self|descendant|descendant-or-self|method|self)},
    :namespace_name => %r{(?:context|global|local|session|universal)},
    :number => %r{(-?\d+(?:\.\d+)?|\.\d+)},
  }

  @@regex[:axis] = %r{(#{@@regex[:ncname]})\s*(?=::)}
  @@regex[:name_colon_star] = %r{(#{@@regex[:ncname]}:\*)}
  @@regex[:qname] = %r{((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})}
  @@regex[:dollar_qname] = %r{\$#{@@regex[:qname]}}
  @@regex[:function_name] = %r{#{@@regex[:qname]}\s*(?=\([^:])}

  @@ops = {
    '..' => :DOT_DOT,
    '::' => :COLON_COLON,
    '!=' => :NEQ,
    '>=' => :GTE,
    '<=' => :LTE,
    '//' => :SLASH_SLASH,
    ':=' => :COLON_EQUAL,
    '.'  => :DOT,
    '@'  => :AT,
    '*'  => :STAR,
    '('  => :LP,
    ')'  => :RP,
    '['  => :LB,
    ']'  => :RB,
    '{'  => :LC,
    '}'  => :RC,
    '/'  => :SLASH,
    '|'  => :PIPE,
    '+'  => :PLUS,
    '-'  => :MINUS,
    '='  => :EQ,
    '>'  => :GT,
    '<'  => :LT,
    '&'  => :AMP,
    ','  => :COMMA,
    ';'  => :SEMI
  }

  @@preceding_tokens = { }
  [%{
    @ :: ( 
    and or mod div 
    * 
    / // | + - = != < <= > >=
    == & && ||
  }.split(/\s*/), '[', ',', '$' ].each { |t| @@preceding_tokens[t] = true }

  @@regex[:general] = Regexp.compile(%{^(?:#{@@regex[:function_name]}|#{@@regex[:axis]}|#{@@regex[:name_colon_star]}|#{@@regex[:qname]}|('[^']*'|"[^"]*")|#{@@regex[:number]}|#{@@regex[:dollar_qname]}|(#{@@regex[:simple_tokens]}))})

  def next_token  
    @token = nil
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end

    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #
    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
        end
        @curpos = @curpos + 1
      end
      white_space = white_space + 1
    end

    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
        
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    #if new_line > 0 || white_space > 0
    #  @token = [ :SP, '' ]
    #end

    if @token.nil? && @last_token && ! @@preceding_tokens[@last_token[1]]
      #Rails.logger.info("last token: <#{@last_token[0]}|#{@last_token[1]}>")
      #Rails.logger.info("preceding_tokens: #{@@preceding_tokens[@last_token[1]] ? 'true' : 'false'}")
      if @source[@curpos..@curpos] == '*'
        @token = [ :STAR, '*' ]
      else
        if @source[@curpos..@source.length-1] =~ /^(#{@@regex[:ncname]})/
          ncname = $1
          case ncname
            when 'for':
              @token = [ :FOR, 'for' ]
            when 'return':
              @token = [ :RETURN, 'return' ]
            when 'in':
              @token = [ :IN, 'in' ]
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            when 'to':
              @token = [ :TO, 'to' ]
            when 'and':
              @token = [ :AND, 'and' ]
            when 'or':
              @token = [ :OR, 'or' ]
            when 'mod':
              @token = [ :MOD, 'mod' ]
            when 'div':
              @token = [ :DIV, 'div' ]
            #when '*doh*':
            #  # do nothing
            #  @token = nil
            else
              @token = nil
          end
        end
      end
    end
 
    if @token.nil? && @source[@curpos..@curpos+1] == '..'
      @token = [ :DOT_DOT, '..' ]
    end

    if @token.nil?
      if @curpos >= @source.length
        @token = [false, false]
        return @token
      end

      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      #@source[@curpos..@source.length-1] =~ @@regex[:general]
      #res = [ nil, $1, $2, $3, $4, $5, $6, $7, $8 ]
      if res.nil?
        raise "Failed to parse '#{@source}' at #{@curpos}': #{@source[@curpos..@source.length-1]}"
      else
        if !res[1].nil?
          if res[1] == 'if'
            @token = [ :IF, 'if' ]
          else
            @token = [ :FUNCTION_NAME, res[1] ]
          end
        elsif !res[2].nil?
          @token = [ res[2] == 'method' ? :AXIS_METHOD : :AXIS_NAME, res[2] ]
        elsif !res[3].nil?
          @token = [ :NAME_COLON_STAR, res[3] ]
        elsif !res[4].nil?
          qname = res[4]
          case qname
            when 'for':
              @token = [ :FOR, 'for' ]
            when 'return':
              @token = [ :RETURN, 'return' ]
            when 'in':
              @token = [ :IN, 'in' ]
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]   
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            else
              @token = [ :QNAME, res[4] ]
          end
        elsif !res[5].nil?
          s = res[5]
          s = s[1..s.length-2]
          @token = [ :LITERAL, s ]
          @curpos = @curpos + 2  # the quotes
        elsif !res[6].nil?
          @token = [ :NUMBER, res[6] ]
        elsif !res[7].nil?
          @curpos = @curpos + 1
          @token = [ :DOLLAR_QNAME, res[7] ]
        elsif !res[8].nil?
          Rails.logger.info("op: #{res[8]} => #{@@ops[res[8]]}")
          @token = [ @@ops[res[8]] || res[8], res[8] ]
        else
          raise "Failed to parse '#{@source}' at #{@curpos}: #{@source[@curpos..@source.length-1]}"
        end
      end
    end

    Rails.logger.info("Token: [#{@token[0].to_s},#{@token[1].to_s}]")
    if !@token[1].nil?
      @curpos = @curpos + @token[1].length
    end
    @last_token = @token
    return @token
  end
...end xsm_expression_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    -3,    77,    -3,    16,    18,   118,    28,    29,    23,    56,
    52,     3,   109,   110,   146,    21,    56,    27,    19,   141,
   112,    30,    33,    37,   103,    53,    55,    23,   -68,   -68,
    34,    95,    53,    55,   105,    11,    14,    19,   140,    25,
    30,    33,    37,    76,    75,     5,     9,    -3,   115,    -3,
    16,    18,    95,    28,    29,   113,    78,    79,     3,    47,
    48,    46,    21,    93,    27,    23,    68,    72,    18,    73,
   138,    29,    44,    45,    23,    19,   135,    34,    30,    33,
    37,   112,    11,    14,    19,    49,    25,    30,    33,    37,
    60,    23,     5,     9,    34,    84,    85,    86,    87,    11,
    14,    19,    61,    25,    30,    33,    37,    78,    79,     5,
     9,    18,   101,    28,    29,   -79,    78,    79,     3,    47,
    48,    46,    21,   112,    27,    47,    48,    46,    18,    49,
    28,    29,    78,    79,    23,     3,    62,    34,    63,    21,
    49,    27,    11,    14,    19,   149,    25,    30,    33,    37,
   150,    23,     5,     9,    34,    80,    81,    82,    83,    11,
    14,    19,    23,    25,    30,    33,    37,    78,    79,     5,
     9,    18,    19,    28,    29,    30,    33,    37,     3,    78,
    79,   151,    21,    65,    27,    94,    95,   154,    18,   112,
    28,    29,    86,    87,    23,     3,    49,    34,   nil,    21,
   nil,    27,    11,    14,    19,   nil,    25,    30,    33,    37,
   nil,    23,     5,     9,    34,    80,    81,    82,    83,    11,
    14,    19,    23,    25,    30,    33,    37,    86,    87,     5,
     9,    18,    19,    28,    29,    30,    33,    37,     3,    70,
    71,   nil,    21,   nil,    27,    86,    87,   nil,    18,   nil,
    28,    29,    86,    87,    23,     3,   nil,    34,   nil,    21,
   nil,    27,    11,    14,    19,   nil,    25,    30,    33,    37,
   nil,    23,     5,     9,    34,    80,    81,    82,    83,    11,
    14,    19,    23,    25,    30,    33,    37,    86,    87,     5,
     9,    18,    19,    28,    29,    30,    33,    37,     3,    70,
    71,   nil,    21,   nil,    27,    23,    86,    87,    18,    86,
    87,    29,    76,    75,    23,    19,   nil,    34,    30,    33,
    37,   nil,    11,    14,    19,   nil,    25,    30,    33,    37,
   nil,    23,     5,     9,    34,    18,    78,    79,    29,    11,
    14,    19,   nil,    25,    30,    33,    37,    76,    75,     5,
     9,   nil,    18,   nil,   nil,    29,   nil,   nil,    23,   nil,
   nil,    34,   nil,   nil,   nil,   nil,    11,    14,    19,   nil,
    25,    30,    33,    37,   nil,    23,     5,     9,    34,    18,
   nil,   nil,    29,    11,    14,    19,   nil,    25,    30,    33,
    37,   nil,   nil,     5,     9,   nil,    18,   nil,   nil,    29,
   nil,   nil,    23,   nil,   nil,    34,   nil,   nil,   nil,   nil,
    11,    14,    19,   nil,    25,    30,    33,    37,   nil,    23,
     5,     9,    34,    18,   nil,   nil,    29,    11,    14,    19,
   nil,    25,    30,    33,    37,   nil,   nil,     5,     9,   nil,
    18,   nil,    28,    29,   nil,   nil,    23,     3,   nil,    34,
   nil,    21,   nil,    27,    11,    14,    19,   nil,    25,    30,
    33,    37,   nil,    23,     5,     9,    34,   nil,   nil,   nil,
   nil,    11,    14,    19,    23,    25,    30,    33,    37,   nil,
   nil,     5,     9,    18,    19,    28,    29,    30,    33,    37,
     3,   nil,   nil,   nil,    21,   nil,    27,    23,   nil,   nil,
    18,   nil,   nil,    29,   nil,   nil,    23,    19,   nil,    34,
    30,    33,    37,   nil,    11,    14,    19,   nil,    25,    30,
    33,    37,   nil,    23,     5,     9,    34,    18,   nil,   nil,
    29,    11,    14,    19,   nil,    25,    30,    33,    37,   nil,
   nil,     5,     9,    18,   nil,   nil,    29,   nil,   nil,   nil,
    23,   nil,   nil,    34,   nil,   nil,   nil,   nil,    11,    14,
    19,   nil,    25,    30,    33,    37,    23,    18,     5,     9,
    29,   nil,   nil,   nil,    11,    14,    19,   nil,    25,    30,
    33,    37,   nil,   nil,     5,     9,   nil,   nil,    18,   nil,
    23,    29,   nil,    34,   nil,   nil,   nil,   nil,    11,    14,
    19,   nil,    25,    30,    33,    37,   nil,   nil,     5,     9,
   nil,    23,   nil,   nil,    34,   nil,   nil,   nil,   nil,    11,
    14,    19,   nil,    25,    30,    33,    37,   nil,   nil,     5,
     9,    18,   nil,    28,    29,   nil,   nil,   nil,     3,   nil,
   nil,   nil,    21,   nil,    27,   nil,   nil,   nil,    18,   nil,
   nil,    29,   nil,   nil,    23,   nil,   nil,    34,   nil,   nil,
   nil,   nil,    11,    14,    19,   nil,    25,    30,    33,    37,
   nil,    23,     5,     9,    34,    18,   nil,   nil,    29,    11,
    14,    19,   nil,    25,    30,    33,    37,   nil,   nil,     5,
     9,   nil,    18,   nil,    28,    29,   nil,   nil,    23,     3,
   nil,    34,   nil,    21,   nil,    27,    11,    14,    19,   nil,
    25,    30,    33,    37,   nil,    23,     5,     9,    34,    18,
   nil,   nil,    29,    11,    14,    19,   nil,    25,    30,    33,
    37,   nil,   nil,     5,     9,   nil,    18,   nil,   nil,    29,
   nil,   nil,    23,   nil,   nil,    34,   nil,   nil,   nil,   nil,
    11,    14,    19,   nil,    25,    30,    33,    37,   nil,    23,
     5,     9,    34,    18,   nil,   nil,    29,    11,    14,    19,
   nil,    25,    30,    33,    37,   nil,   nil,     5,     9,   nil,
    18,   nil,    28,    29,   -79,   nil,    23,     3,   nil,    34,
   nil,    21,   nil,    27,    11,    14,    19,   nil,    25,    30,
    33,    37,   nil,    23,     5,     9,    34,    18,   nil,   nil,
    29,    11,    14,    19,   nil,    25,    30,    33,    37,   nil,
   nil,     5,     9,   nil,    18,   nil,   nil,    29,   nil,   nil,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11,    14,
    19,   nil,    25,    30,    33,    37,   nil,    23,     5,     9,
    34,   nil,   nil,   nil,   nil,    11,    14,    19,   nil,    25,
    30,    33,    37,   nil,   nil,     5,     9,    18,   nil,    28,
    29,   nil,   nil,   nil,     3,   nil,   nil,   nil,    21,   nil,
    27,   nil,   nil,   nil,    18,   nil,    28,    29,   nil,   nil,
    23,     3,   nil,    34,   nil,    21,   nil,    27,    11,    14,
    19,   nil,    25,    30,    33,    37,   nil,    23,     5,     9,
    34,   nil,   nil,   nil,   nil,    11,    14,    19,   nil,    25,
    30,    33,    37,   nil,   nil,     5,     9 ]

racc_action_check = [
     0,    37,     0,     0,     0,    72,     0,     0,    11,    10,
     4,     0,    66,    66,   114,     0,    62,     0,    11,   107,
    66,    11,    11,    11,    62,    10,    10,     0,    11,    11,
     0,    64,    62,    62,    64,     0,     0,     0,   106,     0,
     0,     0,     0,    35,    35,     0,     0,    73,    69,    73,
    73,    73,    67,    73,    73,    67,    59,    59,    73,   131,
   131,   131,    73,    49,    73,   109,    28,    32,    81,    32,
   103,    81,     1,     1,    73,   109,    99,    73,   109,   109,
   109,    98,    73,    73,    73,    95,    73,    73,    73,    73,
    15,    81,    73,    73,    81,    42,    42,    42,    42,    81,
    81,    81,    16,    81,    81,    81,    81,   143,   143,    81,
    81,   138,    61,   138,   138,   138,   142,   142,   138,     2,
     2,     2,   138,   137,   138,   130,   130,   130,   113,     3,
   113,   113,    58,    58,   138,   113,    19,   138,    20,   113,
    21,   113,   138,   138,   138,   144,   138,   138,   138,   138,
   146,   113,   138,   138,   113,   121,   121,   121,   121,   113,
   113,   113,    78,   113,   113,   113,   113,    88,    88,   113,
   113,   112,    78,   112,   112,    78,    78,    78,   112,    89,
    89,   147,   112,    25,   112,    50,    50,   152,   105,   153,
   105,   105,   129,   129,   112,   105,    27,   112,   nil,   105,
   nil,   105,   112,   112,   112,   nil,   112,   112,   112,   112,
   nil,   105,   112,   112,   105,    39,    39,    39,    39,   105,
   105,   105,   110,   105,   105,   105,   105,   128,   128,   105,
   105,   101,   110,   101,   101,   110,   110,   110,   101,    96,
    96,   nil,   101,   nil,   101,    97,    97,   nil,    94,   nil,
    94,    94,   127,   127,   101,    94,   nil,   101,   nil,    94,
   nil,    94,   101,   101,   101,   nil,   101,   101,   101,   101,
   nil,    94,   101,   101,    94,   120,   120,   120,   120,    94,
    94,    94,    79,    94,    94,    94,    94,   126,   126,    94,
    94,    93,    79,    93,    93,    79,    79,    79,    93,    31,
    31,   nil,    93,   nil,    93,    44,   125,   125,    87,   124,
   124,    87,   117,   117,    93,    44,   nil,    93,    44,    44,
    44,   nil,    93,    93,    93,   nil,    93,    93,    93,    93,
   nil,    87,    93,    93,    87,    86,    38,    38,    86,    87,
    87,    87,   nil,    87,    87,    87,    87,   116,   116,    87,
    87,   nil,    85,   nil,   nil,    85,   nil,   nil,    86,   nil,
   nil,    86,   nil,   nil,   nil,   nil,    86,    86,    86,   nil,
    86,    86,    86,    86,   nil,    85,    86,    86,    85,    84,
   nil,   nil,    84,    85,    85,    85,   nil,    85,    85,    85,
    85,   nil,   nil,    85,    85,   nil,    83,   nil,   nil,    83,
   nil,   nil,    84,   nil,   nil,    84,   nil,   nil,   nil,   nil,
    84,    84,    84,   nil,    84,    84,    84,    84,   nil,    83,
    84,    84,    83,    82,   nil,   nil,    82,    83,    83,    83,
   nil,    83,    83,    83,    83,   nil,   nil,    83,    83,   nil,
    29,   nil,    29,    29,   nil,   nil,    82,    29,   nil,    82,
   nil,    29,   nil,    29,    82,    82,    82,   nil,    82,    82,
    82,    82,   nil,    29,    82,    82,    29,   nil,   nil,   nil,
   nil,    29,    29,    29,    45,    29,    29,    29,    29,   nil,
   nil,    29,    29,   141,    45,   141,   141,    45,    45,    45,
   141,   nil,   nil,   nil,   141,   nil,   141,    14,   nil,   nil,
    80,   nil,   nil,    80,   nil,   nil,   141,    14,   nil,   141,
    14,    14,    14,   nil,   141,   141,   141,   nil,   141,   141,
   141,   141,   nil,    80,   141,   141,    80,    34,   nil,   nil,
    34,    80,    80,    80,   nil,    80,    80,    80,    80,   nil,
   nil,    80,    80,    60,   nil,   nil,    60,   nil,   nil,   nil,
    34,   nil,   nil,    34,   nil,   nil,   nil,   nil,    34,    34,
    34,   nil,    34,    34,    34,    34,    60,    76,    34,    34,
    76,   nil,   nil,   nil,    60,    60,    60,   nil,    60,    60,
    60,    60,   nil,   nil,    60,    60,   nil,   nil,    75,   nil,
    76,    75,   nil,    76,   nil,   nil,   nil,   nil,    76,    76,
    76,   nil,    76,    76,    76,    76,   nil,   nil,    76,    76,
   nil,    75,   nil,   nil,    75,   nil,   nil,   nil,   nil,    75,
    75,    75,   nil,    75,    75,    75,    75,   nil,   nil,    75,
    75,   150,   nil,   150,   150,   nil,   nil,   nil,   150,   nil,
   nil,   nil,   150,   nil,   150,   nil,   nil,   nil,    71,   nil,
   nil,    71,   nil,   nil,   150,   nil,   nil,   150,   nil,   nil,
   nil,   nil,   150,   150,   150,   nil,   150,   150,   150,   150,
   nil,    71,   150,   150,    71,    70,   nil,   nil,    70,    71,
    71,    71,   nil,    71,    71,    71,    71,   nil,   nil,    71,
    71,   nil,    68,   nil,    68,    68,   nil,   nil,    70,    68,
   nil,    70,   nil,    68,   nil,    68,    70,    70,    70,   nil,
    70,    70,    70,    70,   nil,    68,    70,    70,    68,    46,
   nil,   nil,    46,    68,    68,    68,   nil,    68,    68,    68,
    68,   nil,   nil,    68,    68,   nil,    47,   nil,   nil,    47,
   nil,   nil,    46,   nil,   nil,    46,   nil,   nil,   nil,   nil,
    46,    46,    46,   nil,    46,    46,    46,    46,   nil,    47,
    46,    46,    47,    48,   nil,   nil,    48,    47,    47,    47,
   nil,    47,    47,    47,    47,   nil,   nil,    47,    47,   nil,
    65,   nil,    65,    65,    65,   nil,    48,    65,   nil,    48,
   nil,    65,   nil,    65,    48,    48,    48,   nil,    48,    48,
    48,    48,   nil,    65,    48,    48,    65,    63,   nil,   nil,
    63,    65,    65,    65,   nil,    65,    65,    65,    65,   nil,
   nil,    65,    65,   nil,    52,   nil,   nil,    52,   nil,   nil,
    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    63,    63,
    63,   nil,    63,    63,    63,    63,   nil,    52,    63,    63,
    52,   nil,   nil,   nil,   nil,    52,    52,    52,   nil,    52,
    52,    52,    52,   nil,   nil,    52,    52,    55,   nil,    55,
    55,   nil,   nil,   nil,    55,   nil,   nil,   nil,    55,   nil,
    55,   nil,   nil,   nil,   154,   nil,   154,   154,   nil,   nil,
    55,   154,   nil,    55,   nil,   154,   nil,   154,    55,    55,
    55,   nil,    55,    55,    55,    55,   nil,   154,    55,    55,
   154,   nil,   nil,   nil,   nil,   154,   154,   154,   nil,   154,
   154,   154,   154,   nil,   nil,   154,   154 ]

racc_action_pointer = [
     0,    37,    88,   125,    -8,   nil,   nil,   nil,   nil,   nil,
   -22,   -19,   nil,   nil,   470,    56,    98,   nil,   nil,    98,
   104,   136,   nil,   nil,   nil,   176,   nil,   192,    59,   436,
   nil,   280,    67,   nil,   523,    22,   nil,   -37,   301,   192,
   nil,   nil,    68,   nil,   278,   447,   715,   732,   759,    49,
   173,   nil,   820,   nil,   nil,   863,   nil,   nil,    97,    21,
   539,   107,   -15,   803,    18,   776,   -23,    39,   688,    40,
   671,   644,     5,    47,   nil,   584,   563,   nil,   135,   255,
   496,    64,   419,   392,   375,   348,   331,   304,   132,   144,
   nil,   nil,   nil,   287,   244,    81,   220,   216,    38,    27,
   nil,   227,   nil,    63,   nil,   184,    30,     6,   nil,    38,
   195,   nil,   167,   124,     6,   nil,   326,   291,   nil,   nil,
   252,   132,   nil,   nil,   280,   277,   258,   223,   198,   163,
    94,    28,   nil,   nil,   nil,   nil,   nil,    80,   107,   nil,
   nil,   479,    81,    72,   101,   nil,   141,   173,   nil,   nil,
   627,   nil,   177,   146,   880,   nil ]

racc_action_default = [
   -68,   -69,   -35,   -86,    -6,   -76,   -60,   -38,    -7,   -77,
   -86,   -55,   -42,    -8,   -68,   -44,   -86,    -9,   -74,   -86,
   -45,   -86,   -10,   -67,   -48,   -86,   -72,   -86,   -86,   -68,
   -66,   -20,   -86,   -70,   -68,   -22,    -1,   -86,   -53,   -25,
    -4,   -54,   -28,    -5,   -68,   -68,   -68,   -68,   -68,   -86,
   -86,   -15,   -68,   -83,   -72,   -68,   -85,   -69,   -56,   -57,
   -68,   -86,   -86,   -68,   -86,   -68,   -50,   -86,   -68,   -86,
   -68,   -68,   -86,   -68,   -43,   -68,   -68,   -71,   -68,   -68,
   -68,   -68,   -68,   -68,   -68,   -68,   -68,   -68,   -58,   -59,
   -41,   -39,   -40,   -68,   -68,   -86,   -21,   -28,   -63,   -86,
   -46,   -68,   -72,   -86,   -47,   -68,   -86,   -80,   -81,   -68,
   -68,   -49,   -68,   -68,   -86,   -75,   -23,   -24,   156,    -2,
   -27,   -26,   -61,   -62,   -29,   -30,   -31,   -32,   -33,   -34,
   -36,   -37,   -17,   -14,   -16,   -84,   -11,   -64,   -68,   -18,
   -78,   -68,   -51,   -52,   -86,   -19,   -86,   -86,   -82,   -73,
   -68,   -72,   -13,   -65,   -68,   -12 ]

racc_goto_table = [
    69,    66,    54,    74,    50,    36,   106,    57,   100,    58,
    57,   104,    59,   116,   117,    90,    91,    92,   122,   123,
   120,   121,    64,   130,   131,   111,    99,    97,    67,    98,
    96,   134,    32,   nil,   nil,   nil,   108,   nil,   nil,   114,
    57,    57,    88,    89,   nil,    97,    97,   nil,   nil,   nil,
    97,    97,   nil,   nil,   102,   124,   125,   126,   127,   128,
   129,   nil,   nil,   nil,   132,   133,   nil,   nil,   nil,   nil,
   nil,   nil,   136,   nil,    57,    57,   139,   137,   119,   147,
   nil,   nil,   nil,   144,   145,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    57,    57,   142,   143,   108,
   nil,   nil,   148,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   152,   nil,   nil,   nil,   155,   153 ]

racc_goto_check = [
     3,    23,    30,    17,    10,     2,    31,    27,    19,    25,
    27,    19,    25,    13,    13,    17,    17,    17,    28,    28,
    14,    14,    10,    16,    16,    24,     3,    15,    10,    23,
    12,    11,     1,   nil,   nil,   nil,     3,   nil,   nil,     3,
    27,    27,    25,    25,   nil,    15,    15,   nil,   nil,   nil,
    15,    15,   nil,   nil,    30,    15,    15,    15,    15,    15,
    15,   nil,   nil,   nil,     3,     3,   nil,   nil,   nil,   nil,
   nil,   nil,     3,   nil,    27,    27,     3,    23,     2,    31,
   nil,   nil,   nil,     3,     3,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    27,    27,    25,    25,     3,
   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     3,   nil,   nil,   nil,     3,    23 ]

racc_goto_pointer = [
   nil,    32,     5,   -29,   nil,   nil,   nil,   nil,   nil,   nil,
     1,   -64,   -22,   -57,   -55,   -25,   -63,   -31,   nil,   -52,
   nil,   nil,   nil,   -25,   -41,    -2,   nil,    -4,   -60,   nil,
    -8,   -59,   nil ]

racc_goto_default = [
   nil,   nil,   nil,    40,    43,     4,     8,    13,    17,    22,
   nil,    51,    31,    35,    39,    42,     2,     7,    12,    15,
    20,    24,    26,   nil,   nil,    38,    41,     1,     6,    10,
   nil,   nil,   107 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 51, :_reduce_1,
  3, 51, :_reduce_2,
  0, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  4, 54, :_reduce_11,
  8, 57, :_reduce_12,
  6, 57, :_reduce_13,
  4, 58, :_reduce_14,
  1, 60, :_reduce_15,
  3, 60, :_reduce_16,
  3, 61, :_reduce_17,
  4, 59, :_reduce_18,
  4, 59, :_reduce_19,
  1, 55, :_reduce_none,
  3, 55, :_reduce_21,
  1, 62, :_reduce_none,
  3, 62, :_reduce_23,
  3, 62, :_reduce_24,
  1, 63, :_reduce_none,
  3, 63, :_reduce_26,
  3, 63, :_reduce_27,
  1, 64, :_reduce_none,
  3, 64, :_reduce_29,
  3, 64, :_reduce_30,
  3, 64, :_reduce_31,
  3, 64, :_reduce_32,
  3, 56, :_reduce_33,
  3, 56, :_reduce_34,
  1, 65, :_reduce_none,
  3, 65, :_reduce_36,
  3, 65, :_reduce_37,
  1, 66, :_reduce_none,
  3, 66, :_reduce_39,
  3, 66, :_reduce_40,
  3, 66, :_reduce_41,
  1, 67, :_reduce_none,
  2, 67, :_reduce_43,
  1, 68, :_reduce_none,
  1, 68, :_reduce_45,
  3, 70, :_reduce_46,
  3, 70, :_reduce_47,
  1, 69, :_reduce_48,
  3, 69, :_reduce_49,
  0, 74, :_reduce_none,
  2, 74, :_reduce_51,
  2, 74, :_reduce_52,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 76, :_reduce_55,
  2, 76, :_reduce_56,
  2, 76, :_reduce_57,
  3, 76, :_reduce_58,
  3, 76, :_reduce_59,
  1, 75, :_reduce_60,
  3, 75, :_reduce_61,
  3, 75, :_reduce_62,
  3, 78, :_reduce_63,
  4, 78, :_reduce_64,
  7, 78, :_reduce_65,
  1, 78, :_reduce_66,
  1, 78, :_reduce_67,
  0, 79, :_reduce_none,
  1, 79, :_reduce_none,
  1, 79, :_reduce_70,
  2, 77, :_reduce_71,
  0, 73, :_reduce_72,
  4, 73, :_reduce_73,
  1, 72, :_reduce_74,
  3, 72, :_reduce_75,
  1, 72, :_reduce_76,
  1, 72, :_reduce_77,
  4, 72, :_reduce_78,
  0, 81, :_reduce_79,
  1, 81, :_reduce_none,
  1, 82, :_reduce_81,
  3, 82, :_reduce_82,
  1, 80, :_reduce_none,
  3, 80, :_reduce_84,
  1, 80, :_reduce_none ]

racc_reduce_n = 86

racc_shift_n = 156

racc_token_table = {
  false => 0,
  :error => 1,
  :SEMI => 2,
  :LET => 3,
  :DOLLAR_QNAME => 4,
  :COLON_EQUAL => 5,
  :IF => 6,
  :LP => 7,
  :RP => 8,
  :THEN => 9,
  :ELSE => 10,
  :FOR => 11,
  :RETURN => 12,
  :COMMA => 13,
  :IN => 14,
  :SOME => 15,
  :SATISFIES => 16,
  :EVERY => 17,
  :OR => 18,
  :AND => 19,
  :EXCEPT => 20,
  :EQ => 21,
  :NEQ => 22,
  :LT => 23,
  :GT => 24,
  :LTE => 25,
  :GTE => 26,
  :DOT_DOT => 27,
  :TO => 28,
  :PLUS => 29,
  :MINUS => 30,
  :STAR => 31,
  :DIV => 32,
  :MOD => 33,
  :PIPE => 34,
  :SLASH => 35,
  :SLASH_SLASH => 36,
  :AXIS_METHOD => 37,
  :COLON_COLON => 38,
  :FUNCTION_NAME => 39,
  :DOT => 40,
  :AT => 41,
  :AXIS_NAME => 42,
  :LB => 43,
  :RB => 44,
  :LITERAL => 45,
  :NUMBER => 46,
  :QNAME => 47,
  :LC => 48,
  :RC => 49 }

racc_nt_base = 50

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEMI",
  "LET",
  "DOLLAR_QNAME",
  "COLON_EQUAL",
  "IF",
  "LP",
  "RP",
  "THEN",
  "ELSE",
  "FOR",
  "RETURN",
  "COMMA",
  "IN",
  "SOME",
  "SATISFIES",
  "EVERY",
  "OR",
  "AND",
  "EXCEPT",
  "EQ",
  "NEQ",
  "LT",
  "GT",
  "LTE",
  "GTE",
  "DOT_DOT",
  "TO",
  "PLUS",
  "MINUS",
  "STAR",
  "DIV",
  "MOD",
  "PIPE",
  "SLASH",
  "SLASH_SLASH",
  "AXIS_METHOD",
  "COLON_COLON",
  "FUNCTION_NAME",
  "DOT",
  "AT",
  "AXIS_NAME",
  "LB",
  "RB",
  "LITERAL",
  "NUMBER",
  "QNAME",
  "LC",
  "RC",
  "$start",
  "statements",
  "statement",
  "expr",
  "let_expr",
  "or_expr",
  "range_expr",
  "if_expr",
  "for_expr",
  "quant_expr",
  "for_vars",
  "for_var",
  "and_expr",
  "equality_expr",
  "relational_expr",
  "additive_expr",
  "multiplicative_expr",
  "unary_expr",
  "union_expr",
  "path_expr",
  "union_expr_x",
  "location_path",
  "primary_expr",
  "predicates",
  "segment",
  "relative_location_path",
  "absolute_location_path",
  "axis_name",
  "step",
  "axis",
  "node_test",
  "opt_args",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 10)
  def _reduce_1(val, _values, result)
     result = Fabulator::XSM::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 11)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 23)
  def _reduce_11(val, _values, result)
     result = Fabulator::XSM::LetExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 26)
  def _reduce_12(val, _values, result)
     result = Fabulator::XSM::IfExpr.new(val[2], val[5], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 27)
  def _reduce_13(val, _values, result)
     result = Fabulator::XSM::IfExpr.new(val[2], val[5], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 29)
  def _reduce_14(val, _values, result)
     result = Fabulator::XSM::ForExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 31)
  def _reduce_15(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 32)
  def _reduce_16(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 34)
  def _reduce_17(val, _values, result)
     result = Fabulator::XSM::ForVar.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 36)
  def _reduce_18(val, _values, result)
     result = Fabulator::XSM::SomeExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 37)
  def _reduce_19(val, _values, result)
     result = Fabulator::XSM::EveryExpr.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 40)
  def _reduce_21(val, _values, result)
     result = Fabulator::XSM::OrExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 43)
  def _reduce_23(val, _values, result)
     result = Fabulator::XSM::AndExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 44)
  def _reduce_24(val, _values, result)
     result = Fabulator::XSM::ExceptExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 47)
  def _reduce_26(val, _values, result)
     result = Fabulator::XSM::EqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 48)
  def _reduce_27(val, _values, result)
     result = Fabulator::XSM::NeqExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 51)
  def _reduce_29(val, _values, result)
     result = Fabulator::XSM::LtExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 52)
  def _reduce_30(val, _values, result)
     result = Fabulator::XSM::LtExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 53)
  def _reduce_31(val, _values, result)
     result = Fabulator::XSM::LteExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 54)
  def _reduce_32(val, _values, result)
     result = Fabulator::XSM::LteExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 56)
  def _reduce_33(val, _values, result)
     result = Fabulator::XSM::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 57)
  def _reduce_34(val, _values, result)
     result = Fabulator::XSM::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 60)
  def _reduce_36(val, _values, result)
     result = Fabulator::XSM::AddExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 61)
  def _reduce_37(val, _values, result)
     result = Fabulator::XSM::SubExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 64)
  def _reduce_39(val, _values, result)
     result = Fabulator::XSM::MpyExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 65)
  def _reduce_40(val, _values, result)
     result = Fabulator::XSM::DivExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 66)
  def _reduce_41(val, _values, result)
     result = Fabulator::XSM::ModExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 69)
  def _reduce_43(val, _values, result)
     result = Fabulator::XSM::NegExpr.new(val[1]) 
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 72)
  def _reduce_45(val, _values, result)
     result = Fabulator::XSM::UnionExpr.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 74)
  def _reduce_46(val, _values, result)
     result = [ val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 75)
  def _reduce_47(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 77)
  def _reduce_48(val, _values, result)
     result = Fabulator::XSM::PathExpr.new(nil, [], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 78)
  def _reduce_49(val, _values, result)
     result = Fabulator::XSM::PathExpr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 81)
  def _reduce_51(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 82)
  def _reduce_52(val, _values, result)
     result = [ Fabulator::XSM::AxisDescendentOrSelf.new ] + val[1] 
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 90)
  def _reduce_55(val, _values, result)
     result = Fabulator::XSM::RootContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 91)
  def _reduce_56(val, _values, result)
     result = Fabulator::XSM::PathExpr.new(Fabulator::XSM::RootContext.new, [], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 92)
  def _reduce_57(val, _values, result)
     result = [ Fabulator::XSM::RootContext.new, Fabulator::XSM::AxisDescendentOrSelf.new(val[1][0]) ] + val[1][1..val[1].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 93)
  def _reduce_58(val, _values, result)
     result = [ Fabulator::XSM::RootContext.new(val[0]) ] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 94)
  def _reduce_59(val, _values, result)
     result = [ Fabulator::XSM::RootContext.new(val[0]), Fabulator::XSM::AxisDescendentOrSelf.new(val[2][0]) ] + val[2][1..val[2].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 96)
  def _reduce_60(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 97)
  def _reduce_61(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 98)
  def _reduce_62(val, _values, result)
     result = val[0] + [ Fabulator::XSM::AxisDescendentOrSelf.new(val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 100)
  def _reduce_63(val, _values, result)
     result = Fabulator::XSM::Predicates.new(Fabulator::XSM::Step.new(val[0], val[1]), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 102)
  def _reduce_64(val, _values, result)
     result = Fabulator::XSM::Predicates.new(Fabulator::XSM::Function.new(@namespaces, val[2], []), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 103)
  def _reduce_65(val, _values, result)
     result = Fabulator::XSM::Predicates.new(Fabulator::XSM::Function.new(@namespaces, val[2], val[4]), val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 104)
  def _reduce_66(val, _values, result)
     result = Fabulator::XSM::CurrentContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 105)
  def _reduce_67(val, _values, result)
     result = Fabulator::XSM::AncestorContext.new 
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 109)
  def _reduce_70(val, _values, result)
     result = Fabulator::XSM::Axis.new('attribute')  
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 111)
  def _reduce_71(val, _values, result)
     result = Fabulator::XSM::Axis.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 113)
  def _reduce_72(val, _values, result)
     result = [ ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 114)
  def _reduce_73(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 118)
  def _reduce_74(val, _values, result)
     result = Fabulator::XSM::Var.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 119)
  def _reduce_75(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 120)
  def _reduce_76(val, _values, result)
     result = Fabulator::XSM::Literal.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 121)
  def _reduce_77(val, _values, result)
     result = Fabulator::XSM::Literal.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 122)
  def _reduce_78(val, _values, result)
     result = Fabulator::XSM::Function.new(@namespaces, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 124)
  def _reduce_79(val, _values, result)
     result = [ ] 
    result
  end
.,.,

# reduce 80 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 127)
  def _reduce_81(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 128)
  def _reduce_82(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 131)
  def _reduce_84(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 85 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class ExpressionParser
    end   # module XSM
  end   # module Fabulator
